{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CommonService = /*#__PURE__*/(() => {\n  class CommonService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.baseURL;\n    }\n\n    getBackendMenu(moduleNameServiceRoute, searchObj) {\n      //   this.getBaseURL(moduleNameServiceRoute);\n      //   // if (searchObj) {\n      //   return this.http\n      //     .post(this.baseUrl + moduleNameServiceRoute + \"/menu-list\", searchObj, {\n      //       headers: new HttpHeaders({\n      //         'Content-Type': 'application/json',\n      //         'authorization': 'Bearer ' + localStorage.getItem('authToken')\n      //       })\n      //     })\n      //     .pipe(\n      //       map((response: any) => {\n      //         return response;\n      //       }),\n      //       catchError((err) => {\n      //         return null;\n      //       })\n      //     );\n      // this.getBaseURL(moduleNameServiceRoute);\n      // if (searchObj) {\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/menu-list\", searchObj, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'authorization': 'Bearer ' + localStorage.getItem('authToken')\n        })\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    createClient(resource) {\n      return this.http.post(this.baseUrl + \"user/clients/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    updateClient(resource, id) {\n      return this.http.put(this.baseUrl + \"user/clients/update/\" + id, resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    createAssign(resource) {\n      // this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + \"assign-project/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createMilestone(resource) {\n      // this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + \"milestone/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllCategories() {\n      return this.http.post(this.baseUrl + \"category\", {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getClienttypeListbyclientId(id) {\n      return this.http.get(this.baseUrl + \"userclient/getclientDetails/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createCategorie(resource) {\n      return this.http.post(this.baseUrl + \"category/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    createBuckets(resource) {\n      return this.http.post(this.baseUrl + \"buckets\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getcategoryById(id) {\n      return this.http.get(this.baseUrl + \"category/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getLabels() {\n      return this.http.get(this.baseUrl + \"template/label\");\n    }\n\n    createNewClientGroup(data) {\n      return this.http.post(this.baseUrl + \"client/addclient\", data).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getCompanyGroupDetails(id) {\n      return this.http.get(this.baseUrl + \"clientgroup/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getPriority() {\n      return this.http.get(this.baseUrl + \"priority/getallpriority\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getSignificance() {\n      return this.http.get(this.baseUrl + \"significance/getallsignificance\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getGovernanceManagement() {\n      return this.http.get(this.baseUrl + \"governance-management/getallgovernancemanagement\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAccountManager() {\n      return this.http.get(this.baseUrl + \"account-manager/getallaccountmanager\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getBDM() {\n      return this.http.get(this.baseUrl + \"bdm/getallbdm\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getSector() {\n      return this.http.get(this.baseUrl + \"sector/getallsector\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getclientType() {\n      return this.http.get(this.baseUrl + \"client-type/getallclienttype\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getTypeOfPoc() {\n      return this.http.get(this.baseUrl + \"poctype/getallpoctype\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getTaxNumber() {\n      return this.http.get(this.baseUrl + \"tax/getalltax\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getBillingCurrency() {\n      return this.http.get(this.baseUrl + \"currency/getallcurrency\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getInvoiceGenerateFrom() {\n      return this.http.get(this.baseUrl + \"invoice-generate-from/getallinvoice-generate-from\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getDocumentType() {\n      return this.http.get(this.baseUrl + \"documenttype/getalldocumenttype\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getPoCName() {\n      // this.getBaseURL(moduleNameServiceRoute);\n      // console.log('url',this.baseUrl + moduleNameServiceRoute + \"/getallpoctype\")\n      return this.http.get(environment.baseAuthURL + \"pocproject/pocname\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getFocusAreaList() {\n      return this.http.get(environment.baseURL + \"focusarea/getallfocusarea\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getServiceCategoriesList() {\n      return this.http.get(environment.baseURL + \"service-category/getallservicecategory\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getServiceLineList() {\n      return this.http.get(environment.baseURL + \"service-lines/getallservicelines\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getProjectStatus() {\n      return this.http.get(environment.baseURL + \"projectstatus/getallStatus\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getProjectType() {\n      return this.http.get(environment.baseURL + \"projecttype/getallType\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getProjectPriority() {\n      return this.http.get(environment.baseURL + \"project-priority/getallprojectpriority\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getPracticeHead() {\n      return this.http.get(environment.baseURL + \"practicehead/getallpracticehead\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getProjectPractice() {\n      return this.http.get(environment.baseURL + \"practice/getallpractice\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getCurrency() {\n      return this.http.get(environment.baseURL + \"currency/getallcurrency\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    createProject(resource) {\n      const headers = new HttpHeaders();\n      headers.append('Content-Type', 'multipart/form-data');\n      console.log(resource);\n      return this.http.post(environment.baseURL + \"project/create\", resource, {\n        headers: headers\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    createPocProject(resource) {\n      return this.http.post(environment.baseURL + \"pocproject/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getPocProject() {\n      return this.http.get(environment.baseURL + \"pocproject/\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deletePocProject(id) {\n      return this.http.delete(environment.baseURL + \"pocproject/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    updatePocProject(id, data) {\n      console.log(\"id= \", id);\n      return this.http.put(environment.baseURL + \"pocproject/update/\" + id, data).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    toggelPocProject(data) {\n      return this.http.put(environment.baseURL + \"pocproject/toggle-status\", data).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createPaymentMilestoneProject(resource) {\n      return this.http.post(environment.baseURL + \"paymentmilestone/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getPaymentMilestoneName() {\n      return this.http.get(environment.baseAuthURL + \"paymentmilestone/\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    updatePaymentMilestoneProject(id, data) {\n      return this.http.put(environment.baseURL + \"paymentmilestone/update/\" + id, data).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deletePaymentMilestone(id) {\n      return this.http.delete(environment.baseURL + \"paymentmilestone/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getOverseas() {\n      return this.http.get(this.baseUrl + \"domestic/getalldomestic\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllClientGroup() {\n      return this.http.get(this.baseUrl + \"/client/\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getCountry() {\n      return this.http.get(this.baseUrl + \"country/getallcountry\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getState(id) {\n      return this.http.get(this.baseUrl + \"state/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getIndustry() {\n      return this.http.get(this.baseUrl + \"industry/getallindustry\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    toggelPaymentMilestone(data) {\n      console.log(data);\n      return this.http.put(environment.baseURL + \"paymentmilestone/toggle-status\", data).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectType() {\n      return this.http.get(this.baseUrl + \"project-type/getallType\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllProjectLead() {\n      return this.http.get(this.baseUrl + \"project-lead/getAllLead\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getCompanyList(id) {\n      return this.http.get(environment.baseURL + \"company/getcompany/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectTeamMember() {\n      return this.http.get(this.baseUrl + \"project-team-member/getAllTeamMember\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllTimeZone() {\n      return this.http.get(this.baseUrl + \"time-zone/getAllTimeZone\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllProjectStatusFrequency() {\n      return this.http.get(this.baseUrl + \"project-status-frequency/getAllProjectStatusFrequency\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getPayment() {\n      return this.http.get(this.baseUrl + \"paymentterm/getallpaymentterm\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllDayOfMonth() {\n      return this.http.get(this.baseUrl + \"day-of-month/getAllDayOfMonth\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getInvoiceSentBy() {\n      return this.http.get(this.baseUrl + \"invoicesentby/getallinvoicesentby\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectCallFrequency() {\n      return this.http.get(this.baseUrl + \"project-call-frequency/getAllCallFrequency\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getInvoiceSentVia() {\n      return this.http.get(this.baseUrl + \"invoicesentvia/getallinvoicesentvia\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllMilestonePercentage() {\n      return this.http.get(this.baseUrl + \"milestone-percentage/getAllMilestonePercentage\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getBankdetails() {\n      return this.http.get(this.baseUrl + \"bank-detail/getallbank-detail\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createPoc(resource) {\n      return this.http.post(this.baseUrl + \"poc/\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n        return err;\n      }));\n    }\n\n    getPoc(id) {\n      return this.http.get(this.baseUrl + \"poc/getall/\" + id).pipe(map(response => {\n        return response;\n        console.log(response, 'one');\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getOnePoc(id) {\n      return this.http.get(this.baseUrl + \"poc/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deletePoc(id) {\n      return this.http.delete(this.baseUrl + \"poc/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    toggelPoc(data) {\n      return this.http.post(this.baseUrl + \"poc/toggle-status/\", data).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    updatePoc(id, resource) {\n      return this.http.put(this.baseUrl + \"poc/\" + id, resource).pipe(map(response => {\n        console.log(response, \"response\");\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createDocument(resource) {\n      return this.http.post(this.baseUrl + \"document/create\", resource); // .pipe(\n      //   map((response: any) => {\n      //     return response;\n      //   }),\n      //   catchError((err) => {\n      //     return err;\n      //   })\n      // );\n    }\n\n    getDocument() {\n      return this.http.get(this.baseUrl + \"document/\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    updateData(id, data) {\n      // console.log(id, 'uujj');\n      return this.http.put(this.baseUrl + \"milestone/\" + id, data, {}).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllProjectManager() {\n      return this.http.get(this.baseUrl + \"project-manager/getAllManager\").pipe(map(response => {\n        return response;\n      }));\n    } // getAllProjectLead() {\n    //     map((response: any) => {\n    //       return response;\n    //     }\n    //     ),\n    //   )}\n    // getAllProjectTeamMember() {\n    //   return this.http.get(this.baseUrl + \"project-team-member/getAllTeamMember\").pipe(\n    //     map((response: any) => {\n    //       return response;\n    //     }\n    //     ),\n    //   )}\n\n\n    toggelStatus(data) {\n      return this.http.post(this.baseUrl + \"milestone/toggle-status/\", data).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getOneDoc(id) {\n      return this.http.get(this.baseUrl + \"document/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllResourceCategory() {\n      return this.http.get(this.baseUrl + \"resource-category/getAllResourceCategory\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllResourceName() {\n      return this.http.get(this.baseUrl + \"resource-name/getAllResourceName\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllResourceBand() {\n      return this.http.get(this.baseUrl + \"resource-band/getAllResourceBand\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllMilestoneData() {\n      return this.http.get(this.baseUrl + \"milestone/getAllMilestone\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deleteMilestoneUser(Id) {\n      return this.http.delete(this.baseUrl + \"milestone/\" + Id, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deleteDoc(id) {\n      return this.http.delete(this.baseUrl + \"document/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getOneData(id) {\n      return this.http.get(this.baseUrl + \"milestone/\" + id, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getAllStatus() {\n      return this.http.get(this.baseUrl + \"project-status/getallStatus\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n  }\n\n  CommonService.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}