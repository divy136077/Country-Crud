{"ast":null,"code":"import { KTUtil } from '../../../../../../assets/js/components/util';\nimport KTLayoutSubheader from '../../../../../../assets/js/layout/base/subheader';\nimport { ResolveEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/subheader.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nfunction SubheaderWrapperComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nexport let SubheaderWrapperComponent = /*#__PURE__*/(() => {\n  class SubheaderWrapperComponent {\n    constructor(subheader, router) {\n      this.subheader = subheader;\n      this.router = router;\n      this.subheader.setDefaultSubheader();\n      this.subheaderVersion$ = this.subheader.subheaderVersionSubject.asObservable();\n\n      const initSubheader = () => {\n        setTimeout(() => {\n          this.subheader.updateAfterRouteChanges(this.router.url);\n        }, 0);\n      };\n\n      initSubheader(); // subscribe to router events\n\n      this.router.events.pipe(filter(event => event instanceof ResolveEnd)).subscribe(initSubheader);\n    }\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n      KTUtil.ready(() => {\n        KTLayoutSubheader.init('kt_subheader');\n      });\n    }\n\n  }\n\n  SubheaderWrapperComponent.ɵfac = function SubheaderWrapperComponent_Factory(t) {\n    return new (t || SubheaderWrapperComponent)(i0.ɵɵdirectiveInject(i1.SubheaderService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  SubheaderWrapperComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SubheaderWrapperComponent,\n    selectors: [[\"app-subheader-wrapper\"]],\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"]],\n    template: function SubheaderWrapperComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SubheaderWrapperComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        i0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.subheaderVersion$));\n      }\n    },\n    directives: [i3.NgIf],\n    pipes: [i3.AsyncPipe],\n    encapsulation: 2\n  });\n  return SubheaderWrapperComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}