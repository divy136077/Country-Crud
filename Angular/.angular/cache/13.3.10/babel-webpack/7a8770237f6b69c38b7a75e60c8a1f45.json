{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, HostListener, Directive, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet ClipboardService = /*#__PURE__*/(() => {\n  let ClipboardService = class ClipboardService {\n    constructor(document, window) {\n      this.document = document;\n      this.window = window;\n      this.copySubject = new Subject();\n      this.copyResponse$ = this.copySubject.asObservable();\n      this.config = {};\n    }\n\n    configure(config) {\n      this.config = config;\n    }\n\n    copy(content) {\n      if (!this.isSupported || !content) {\n        return this.pushCopyResponse({\n          isSuccess: false,\n          content\n        });\n      }\n\n      const copyResult = this.copyFromContent(content);\n\n      if (copyResult) {\n        return this.pushCopyResponse({\n          content,\n          isSuccess: copyResult\n        });\n      }\n\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content\n      });\n    }\n\n    get isSupported() {\n      return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n\n    isTargetValid(element) {\n      if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n        if (element.hasAttribute('disabled')) {\n          throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n        }\n\n        return true;\n      }\n\n      throw new Error('Target should be input or textarea');\n    }\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\n\n\n    copyFromInputElement(targetElm, isFocus = true) {\n      try {\n        this.selectTarget(targetElm);\n        const re = this.copyText();\n        this.clearSelection(isFocus ? targetElm : undefined, this.window);\n        return re && this.isCopySuccessInIE11();\n      } catch (error) {\n        return false;\n      }\n    }\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\n\n\n    isCopySuccessInIE11() {\n      const clipboardData = this.window['clipboardData'];\n\n      if (clipboardData && clipboardData.getData) {\n        if (!clipboardData.getData('Text')) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\n\n\n    copyFromContent(content, container = this.document.body) {\n      // check if the temp textarea still belongs to the current container.\n      // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n      if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n        this.destroy(this.tempTextArea.parentElement || undefined);\n      }\n\n      if (!this.tempTextArea) {\n        this.tempTextArea = this.createTempTextArea(this.document, this.window);\n\n        try {\n          container.appendChild(this.tempTextArea);\n        } catch (error) {\n          throw new Error('Container should be a Dom element');\n        }\n      }\n\n      this.tempTextArea.value = content;\n      const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n\n      if (this.config.cleanUpAfterCopy) {\n        this.destroy(this.tempTextArea.parentElement || undefined);\n      }\n\n      return toReturn;\n    }\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\n\n\n    destroy(container = this.document.body) {\n      if (this.tempTextArea) {\n        container.removeChild(this.tempTextArea); // removeChild doesn't remove the reference from memory\n\n        this.tempTextArea = undefined;\n      }\n    }\n    /**\r\n     * Select the target html input element.\r\n     */\n\n\n    selectTarget(inputElement) {\n      inputElement.select();\n      inputElement.setSelectionRange(0, inputElement.value.length);\n      return inputElement.value.length;\n    }\n\n    copyText() {\n      return this.document.execCommand('copy');\n    }\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\n\n\n    clearSelection(inputElement, window) {\n      var _a;\n\n      inputElement && inputElement.focus();\n      (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n    }\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\n\n\n    createTempTextArea(doc, window) {\n      const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n      let ta;\n      ta = doc.createElement('textarea'); // Prevent zooming on iOS\n\n      ta.style.fontSize = '12pt'; // Reset box model\n\n      ta.style.border = '0';\n      ta.style.padding = '0';\n      ta.style.margin = '0'; // Move element out of screen horizontally\n\n      ta.style.position = 'absolute';\n      ta.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically\n\n      const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n      ta.style.top = yPosition + 'px';\n      ta.setAttribute('readonly', '');\n      return ta;\n    }\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\n\n\n    pushCopyResponse(response) {\n      this.copySubject.next(response);\n    }\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\n\n\n    pushCopyReponse(response) {\n      this.pushCopyResponse(response);\n    }\n\n  };\n\n  ClipboardService.ɵfac = function ClipboardService_Factory(t) {\n    return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8));\n  };\n\n  ClipboardService.ɵprov = ɵɵdefineInjectable({\n    factory: function ClipboardService_Factory() {\n      return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8));\n    },\n    token: ClipboardService,\n    providedIn: \"root\"\n  });\n  ClipboardService = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(WINDOW))], ClipboardService);\n  return ClipboardService;\n})();\nlet ClipboardDirective = /*#__PURE__*/(() => {\n  let ClipboardDirective = class ClipboardDirective {\n    constructor(clipboardSrv) {\n      this.clipboardSrv = clipboardSrv;\n      this.cbOnSuccess = new EventEmitter();\n      this.cbOnError = new EventEmitter();\n    } // tslint:disable-next-line:no-empty\n\n\n    ngOnInit() {}\n\n    ngOnDestroy() {\n      this.clipboardSrv.destroy(this.container);\n    }\n\n    onClick(event) {\n      if (!this.clipboardSrv.isSupported) {\n        this.handleResult(false, undefined, event);\n      } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n        this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n      } else if (this.cbContent) {\n        this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n      }\n    }\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\n\n\n    handleResult(succeeded, copiedContent, event) {\n      let response = {\n        isSuccess: succeeded,\n        event\n      };\n\n      if (succeeded) {\n        response = Object.assign(response, {\n          content: copiedContent,\n          successMessage: this.cbSuccessMsg\n        });\n        this.cbOnSuccess.emit(response);\n      } else {\n        this.cbOnError.emit(response);\n      }\n\n      this.clipboardSrv.pushCopyResponse(response);\n    }\n\n  };\n\n  ClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n    return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService));\n  };\n\n  ClipboardDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClipboardDirective,\n    selectors: [[\"\", \"ngxClipboard\", \"\"]],\n    hostBindings: function ClipboardDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event.target);\n        });\n      }\n    },\n    inputs: {\n      targetElm: [\"ngxClipboard\", \"targetElm\"],\n      container: \"container\",\n      cbContent: \"cbContent\",\n      cbSuccessMsg: \"cbSuccessMsg\"\n    },\n    outputs: {\n      cbOnSuccess: \"cbOnSuccess\",\n      cbOnError: \"cbOnError\"\n    }\n  });\n\n  __decorate([Input('ngxClipboard')], ClipboardDirective.prototype, \"targetElm\", void 0);\n\n  __decorate([Input()], ClipboardDirective.prototype, \"container\", void 0);\n\n  __decorate([Input()], ClipboardDirective.prototype, \"cbContent\", void 0);\n\n  __decorate([Input()], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\n\n  __decorate([Output()], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\n\n  __decorate([Output()], ClipboardDirective.prototype, \"cbOnError\", void 0);\n\n  __decorate([HostListener('click', ['$event.target'])], ClipboardDirective.prototype, \"onClick\", null);\n\n  return ClipboardDirective;\n})();\nlet ClipboardIfSupportedDirective = /*#__PURE__*/(() => {\n  let ClipboardIfSupportedDirective = class ClipboardIfSupportedDirective {\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\n      this._clipboardService = _clipboardService;\n      this._viewContainerRef = _viewContainerRef;\n      this._templateRef = _templateRef;\n    }\n\n    ngOnInit() {\n      if (this._clipboardService.isSupported) {\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\n      }\n    }\n\n  };\n\n  ClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n    return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  ClipboardIfSupportedDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClipboardIfSupportedDirective,\n    selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n  });\n  return ClipboardIfSupportedDirective;\n})();\nlet ClipboardModule = /*#__PURE__*/(() => {\n  let ClipboardModule = class ClipboardModule {};\n\n  ClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n    return new (t || ClipboardModule)();\n  };\n\n  ClipboardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClipboardModule\n  });\n  ClipboardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClipboardModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: function () {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    }\n  });\n})();\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService }; //# sourceMappingURL=ngx-clipboard.js.map","map":null,"metadata":{},"sourceType":"module"}