{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Workbook } from 'exceljs';\nimport * as fs from 'file-saver';\nimport * as Excel from 'exceljs/dist/exceljs.min.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nexport let ExcelService = /*#__PURE__*/(() => {\n  class ExcelService {\n    constructor(toastr) {\n      this.toastr = toastr;\n    }\n\n    exportData(details, excelFileName) {\n      const header = details.header;\n      const data = details.data; // Create a workbook with a worksheet\n\n      const workbook = new Workbook();\n      const worksheet = workbook.addWorksheet(excelFileName);\n      worksheet.addRow([]); // Adding Header Row\n\n      const headerRow = worksheet.addRow(header);\n      headerRow.eachCell(cell => {\n        cell.border = {\n          top: {\n            style: 'thin'\n          },\n          left: {\n            style: 'thin'\n          },\n          bottom: {\n            style: 'thin'\n          },\n          right: {\n            style: 'thin'\n          }\n        };\n        cell.font = {\n          bold: true,\n          color: {\n            argb: '000000'\n          },\n          size: 12\n        };\n      });\n      data.forEach(d => {\n        worksheet.addRow(d);\n      });\n      worksheet.addRow([]);\n      workbook.xlsx.writeBuffer().then(response => {\n        const blob = new Blob([response], {\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        fs.saveAs(blob, excelFileName + '_' + new Date().getTime() + '.xlsx');\n        this.toastr.success('Data exported succesfully!', 'Success!');\n      });\n    }\n\n    totalTimePerUser(details, excelFileName) {\n      const title = details.mainTitle;\n      const subTitle = details.title;\n      const header = details.header;\n      const data = details.data; // Create a workbook with a worksheet\n\n      let workbook = new Excel.Workbook();\n      let worksheet = workbook.addWorksheet(excelFileName);\n      worksheet.addRow([]); // Add Row and formatting\n\n      let titleRow = worksheet.addRow([title]);\n      titleRow.font = {\n        name: 'Calibri',\n        bold: true\n      };\n      worksheet.mergeCells(`A${titleRow.number}:D${titleRow.number}`);\n      let subTitleRow = worksheet.addRow([subTitle]);\n      subTitleRow.font = {\n        name: 'Calibri',\n        bold: true,\n        color: {\n          argb: '00FF0000'\n        }\n      }; // Adding Header Row\n\n      let headerRow = worksheet.addRow(header);\n      headerRow.eachCell((cell, number) => {\n        cell.border = {\n          top: {\n            style: 'thin'\n          },\n          left: {\n            style: 'thin'\n          },\n          bottom: {\n            style: 'thin'\n          },\n          right: {\n            style: 'thin'\n          }\n        };\n        cell.font = {\n          bold: true,\n          color: {\n            argb: '000000'\n          },\n          size: 12\n        };\n      });\n      data.forEach(d => {\n        worksheet.addRow(d);\n      });\n      worksheet.addRow([]);\n      let totalRow = worksheet.addRow([]);\n      let totalCell = totalRow.getCell(7);\n      totalCell.value = 'Total';\n      totalCell.font = {\n        name: 'Calibri',\n        size: 12,\n        bold: true\n      };\n      let ActHrsCell = totalRow.getCell(8);\n      ActHrsCell.value = details.totalCount.totalActHrs;\n      ActHrsCell.border = {\n        top: {\n          style: 'thin'\n        },\n        left: {\n          style: 'thin'\n        },\n        bottom: {\n          style: 'thin'\n        },\n        right: {\n          style: 'thin'\n        }\n      };\n      ActHrsCell.font = {\n        name: 'Calibri',\n        size: 12,\n        bold: true\n      };\n      let RegHrsCell = totalRow.getCell(9);\n      RegHrsCell.value = details.totalCount.totalRegHrs;\n      RegHrsCell.border = {\n        top: {\n          style: 'thin'\n        },\n        left: {\n          style: 'thin'\n        },\n        bottom: {\n          style: 'thin'\n        },\n        right: {\n          style: 'thin'\n        }\n      };\n      RegHrsCell.font = {\n        name: 'Calibri',\n        size: 12,\n        bold: true\n      };\n      let OtHrsCell = totalRow.getCell(10);\n      OtHrsCell.value = details.totalCount.totalOtHrs;\n      OtHrsCell.border = {\n        top: {\n          style: 'thin'\n        },\n        left: {\n          style: 'thin'\n        },\n        bottom: {\n          style: 'thin'\n        },\n        right: {\n          style: 'thin'\n        }\n      };\n      OtHrsCell.font = {\n        name: 'Calibri',\n        size: 12,\n        bold: true\n      };\n      let DTHrsCell = totalRow.getCell(11);\n      DTHrsCell.value = details.totalCount.totalDoubleTimeHrs;\n      DTHrsCell.border = {\n        top: {\n          style: 'thin'\n        },\n        left: {\n          style: 'thin'\n        },\n        bottom: {\n          style: 'thin'\n        },\n        right: {\n          style: 'thin'\n        }\n      };\n      DTHrsCell.font = {\n        name: 'Calibri',\n        size: 12,\n        bold: true\n      }; // Generate & Save Excel File\n\n      this.saveAsExcelFile(workbook, excelFileName, worksheet);\n    }\n\n    saveAsExcelFile(workbook, excelFileName, worksheet) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield workbook.xlsx.writeBuffer().then(data => {\n          let blob = new Blob([data], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          });\n          fs.saveAs(blob, excelFileName + '_' + new Date().getTime() + '.xlsx');\n          this.toastr.success('Report download succesfully!', 'Success!');\n        }); //  await this.toastr.success('Report download succesfully!', 'Success!');\n      });\n    }\n\n    excelExportFile(details, excelFileName) {\n      const title = details.title;\n      const subTitle = details.title;\n      const header = details.header;\n      const data = details.data; // Create a workbook with a worksheet\n\n      const workbook = new Workbook();\n      let worksheet = workbook.addWorksheet(excelFileName); // worksheet.addRow([]);\n      // Add Row and formatting\n\n      let titleRow = worksheet.addRow([title]);\n      titleRow.font = {\n        name: 'Calibri',\n        bold: true\n      };\n      worksheet.mergeCells(`A${titleRow.number}:D${titleRow.number}`); // Adding Header Row\n\n      let headerRow = worksheet.addRow(header);\n      headerRow.eachCell((cell, number) => {\n        cell.border = {\n          top: {\n            style: 'thin'\n          },\n          left: {\n            style: 'thin'\n          },\n          bottom: {\n            style: 'thin'\n          },\n          right: {\n            style: 'thin'\n          }\n        };\n        cell.font = {\n          bold: true,\n          color: {\n            argb: '000000'\n          },\n          size: 12\n        };\n      });\n      data.forEach(d => {\n        worksheet.addRow(d);\n      });\n      worksheet.addRow([]); // Generate & Save Excel File\n\n      this.saveAsExcelFile(workbook, excelFileName, worksheet);\n    }\n\n  }\n\n  ExcelService.ɵfac = function ExcelService_Factory(t) {\n    return new (t || ExcelService)(i0.ɵɵinject(i1.ToastrService));\n  };\n\n  ExcelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExcelService,\n    factory: ExcelService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExcelService;\n})();","map":null,"metadata":{},"sourceType":"module"}