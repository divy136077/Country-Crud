{"ast":null,"code":"// import { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { Title } from '@angular/platform-browser';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { TranslateService } from '@ngx-translate/core';\n// import { ToastrService } from 'ngx-toastr';\n// import { API_ROUTES, validationLength } from 'src/app/constant/constant';\n// import { RegexEnum } from 'src/app/constant/regex';\n// import { CommonService } from 'src/app/_metronic/core/services/common.service';\n// import { clientListModel } from '../model/client.model';\n// import { GridOption } from '../../../_metronic/shared/crud-table/models/gridoption.model';\n// import { MatAccordion } from '@angular/material/expansion';\n// import * as bcrypt from 'bcryptjs'\n// @Component({\n//   selector: 'app-client-add-edit',\n//   templateUrl: './client-add-edit.component.html',\n//   styleUrls: ['./client-add-edit.component.scss']\n// })\n// export class clientAddEditComponent implements OnInit {\n//   @ViewChild(MatAccordion) accordion: MatAccordion;\n//   stateList: any;\n//   industryList: any;\n//   clientTypeList: any;\n//   pocTypeList: any;\n//   TaxnumberList: any;\n//   currencyList: any;\n//   invoiceGenerateFormList: any;\n//   paymentList: any;\n//   invoiceSentByList: any;\n//   invoiceSentViaList: any;\n//   bankdetailsList: any;\n//   countryid: any;\n//   sectorList: any;\n//   companyGroupDetailsList: any;\n//   myButton() {\n//   }\n//   activeIdString = 1;\n//   languageList: any = [];\n//   roleListModel = new clientListModel();\n//   translations: any = [];\n//   currentLang: any;\n//   langobj: any;\n//   isSubmitted: boolean;\n//   roleId: string | number;\n//   roleForm: FormGroup;\n//   statusArr: any = [\n//     { value: this.translateService.instant('PAGES.COMMON.ACTIVE'), key: 1 },\n//     { value: this.translateService.instant('PAGES.COMMON.INACTIVE'), key: 0 }];\n//   selectedPermission: any = [];\n//   isReset: boolean;\n//   rolePermissions: any = [];\n//   selectAllPortalModule = [];\n//   selectAllModule = [];\n//   moduleNameServiceRoute = API_ROUTES.ROLE;\n//   fieldLength = validationLength;\n//   moduleList: any = [];\n//   portalListArr: any = [];\n//   rightsList: any = [];\n//   selectedModule: any = [];\n//   allPermissionArr: any = [];\n//   allModuleArr: any = {};\n//   permissions: any;\n//   isAllSelectList: any = [];\n//   gridOption: GridOption = {\n//     allrecords: true,\n//     page: 1,\n//     pagesize: 10,\n//     sortDir: 'asc',\n//     sortField: 'name',\n//     locale: 'en',\n//     filters: {\n//     }\n//   };\n//   overseasList: any;\n//   countryList: any;\n//   portalList: any;\n//   constructor(\n//     private translateService: TranslateService,\n//     private router: Router,\n//     private route: ActivatedRoute,\n//     private titleService: Title,\n//     private fb: FormBuilder,\n//     private commonService: CommonService,\n//     private toastr: ToastrService,\n//     private cdr: ChangeDetectorRef,\n//   ) {\n//     this.initForm();\n//   }\n//   async ngOnInit(): Promise<void> {\n//     // const hashId = this.route.snapshot.queryParams['id'];\n//     // const id = localStorage.getItem('id')\n//     // const roleId = await bcrypt.compare(id, hashId);\n//     // if (roleId == true) {\n//     //   this.roleId = id;\n//     //   this.getModuleList();\n//     //   this.getPortalList();\n//     //   if (this.roleId) {\n//     //     this.titleService.setTitle(this.translateService.instant('PAGES.CLIENT.EDIT_TITLE'));\n//     //     this.getDetail();\n//     //   } else {\n//     //     this.titleService.setTitle(this.translateService.instant('PAGES.CLIENT.ADD_TITLE'));\n//     //   }\n//     // }\n//     this.getSector()\n//     this.getOverseas()\n//     this.getCountry()\n//     this.getIndustry();\n//     this.getClientType();\n//     this.getTypeOfPoc();\n//     this.getTaxNumber();\n//     this.getBillingCurrency();\n//     this.getInvoiceGenerateFrom();\n//     this.getPayment();\n//     this.getInvoiceSentBy();\n//     this.getInvoiceSentVia();\n//     this.getBankdetails();\n//     this.GetCompanyGroupDetails()\n//   }\n//   // convenience getter for easy access to form fields\n//   get f() {\n//     return this.roleForm.controls;\n//   }\n//   /**\n//    * Form Init\n//    */\n//   initForm() {\n//     this.roleForm = this.fb.group({\n//       group_name: ['', Validators.compose([\n//         Validators.required])],\n//       account_priority: ['', Validators.compose([\n//         Validators.required])],\n//       significance: ['', Validators.compose([\n//         Validators.required])],\n//       contact_person_name: ['', Validators.compose([\n//         Validators.required])],\n//       email: ['', Validators.compose([\n//         Validators.required, Validators.email,\n//         Validators.pattern(RegexEnum.email),])],\n//       contact_number: ['', Validators.compose([\n//         Validators.required,\n//         Validators.pattern('^((\\\\+91-?)|0)?[0-9]{10,15}$')])],\n//       governance_management: ['', Validators.compose([\n//         Validators.required])],\n//       account_manager: ['', Validators.compose([\n//         Validators.required])],\n//       bdm_name: ['', Validators.compose([\n//         Validators.required])],\n//       company_name: ['', Validators.compose([\n//         Validators.required])],\n//       sector: ['', Validators.compose([\n//         Validators.required])],\n//       overseas_domestic: ['', Validators.compose([\n//         Validators.required])],\n//       country: ['', Validators.compose([\n//         Validators.required])],\n//       state: ['', Validators.compose([\n//         Validators.required])],\n//       industry: ['', Validators.compose([\n//         Validators.required])],\n//       engagement_month_year: ['', Validators.compose([\n//         Validators.required])],\n//       client_type: ['', Validators.compose([\n//         Validators.required])],\n//       type_Of_PoC: ['', Validators.compose([\n//         Validators.required])],\n//       PoC_name: ['', Validators.compose([\n//         Validators.required])],\n//       designation: ['', Validators.compose([\n//         Validators.required])],\n//       phone: ['', Validators.compose([\n//         Validators.required,\n//         Validators.pattern('^((\\\\+91-?)|0)?[0-9]{10,15}$')])],\n//       email_poc: ['', Validators.compose([\n//         Validators.required])],\n//       reference_name: ['', Validators.compose([\n//         Validators.required])],\n//       billing_address: ['', Validators.compose([\n//         Validators.required])],\n//       tax_number: ['', Validators.compose([\n//         Validators.required])],\n//       billing_currency: ['', Validators.compose([\n//         Validators.required])],\n//       invoice_generate: ['', Validators.compose([\n//         Validators.required])],\n//       payment_terms: ['', Validators.compose([\n//         Validators.required])],\n//       sent_to_client: ['', Validators.compose([\n//         Validators.required])],\n//       invoice_sent: ['', Validators.compose([\n//         Validators.required])],\n//       invoice_sent_name: ['', Validators.compose([\n//         Validators.required])],\n//       email_to: ['', Validators.compose([\n//         Validators.required])],\n//       email_cc: ['', Validators.compose([\n//         Validators.required])],\n//       instruction_for_accounts: ['', Validators.compose([\n//         Validators.required])],\n//       bank_details: ['', Validators.compose([\n//         Validators.required])],\n//       period_from: ['', Validators.compose([\n//         Validators.required])],\n//       period_to: ['', Validators.compose([\n//         Validators.required])],\n//       document_type: ['', Validators.compose([\n//         Validators.required])],\n//       document: ['', Validators.compose([\n//         Validators.required])],\n//     });\n//   }\n//   /**\n//    * Checking control validation\n//    *\n//    * @param controlName: string => Equals to formControlName\n//    * @param validationType: string => Equals to valitors name\n//    */\n//   isControlHasError(controlName: string, validationType: string): boolean {\n//     const control: any = this.roleForm.controls[controlName];\n//     if (!control) {\n//       return false;\n//     }\n//     const result = control.hasError(validationType) && (control.dirty || control.touched);\n//     return result;\n//   }\n//   /** Get Detail by id */\n//   getDetail() {\n//     this.commonService.getOne(this.roleId, this.moduleNameServiceRoute).subscribe(response => {\n//       this.roleListModel = response.result;\n//       if (this.roleListModel.rights) {\n//         this.selectedModule = JSON.parse(this.roleListModel.rights);\n//       }\n//       // this.selectedPermission = this.roleListModel.permission ? this.roleListModel.permission.split(',') : [];\n//       this.roleForm.patchValue(this.roleListModel);\n//       this.cdr.detectChanges();\n//     });\n//   }\n//   /** Reset Form */\n//   reset() {\n//     this.roleForm.reset({ status: this.statusArr[0].key });\n//     this.selectedModule = [];\n//     this.isReset = !this.isReset;\n//   }\n//   /** Save Data */\n//   save() {\n//     console.log(\"save\");\n//     this.isSubmitted = true;\n//     const controls = this.roleForm.controls;\n//     // check form\n//     if (this.roleForm.invalid) {\n//       Object.keys(controls).forEach(controlName =>\n//         controls[controlName].markAsTouched()\n//       );\n//       this.isSubmitted = false;\n//       return;\n//     }\n//     Object.keys(this.selectedPermission).forEach(element => {\n//     });\n//     this.roleForm.value.rights = JSON.stringify(this.selectedModule);\n//     this.commonService.create(this.roleForm.value, this.moduleNameServiceRoute).subscribe(res => {\n//       this.isSubmitted = false;\n//       if (res.status) {\n//         this.router.navigate(['role']).then(() => {\n//           this.toastr.success(res.message, 'Success!');\n//         });\n//       } else {\n//         if (res.message) {\n//           this.toastr.error(res.message, 'Error!');\n//         }\n//       }\n//     }, err => { this.isSubmitted = false; });\n//   }\n//   /** Update Data */\n//   update(isUpdate) {\n//     const controls = this.roleForm.controls;\n//     // check form\n//     if (this.roleForm.invalid) {\n//       Object.keys(controls).forEach(controlName =>\n//         controls[controlName].markAsTouched()\n//       );\n//       return;\n//     }\n//     Object.keys(this.selectedPermission).forEach(element => {\n//     });\n//     this.roleForm.value.rights = JSON.stringify(this.selectedModule);\n//     console.log(this.roleForm.value.rights);\n//     this.commonService.update(this.roleForm.value, this.moduleNameServiceRoute, this.roleId).subscribe(res => {\n//       if (res.status) {\n//         if (!isUpdate) {\n//           this.router.navigate(['role']).then(() => {\n//             this.toastr.success(res.message, 'Success!');\n//           });\n//         } else {\n//           this.toastr.success(res.message, 'Success!');\n//         }\n//       } else {\n//         if (res.message) {\n//           this.toastr.error(res.message, 'Error!');\n//         }\n//       }\n//     });\n//   }\n//   /** Receive event from child */\n//   receivePermissions($event) {\n//     this.selectedPermission = $event;\n//   }\n//   getModuleList() {\n//     this.commonService.searchAll('module', this.gridOption).subscribe(response => {\n//       this.moduleList = response.result.items;\n//       this.getRightsList();\n//     });\n//   }\n//   /** Select all permission of that module */\n//   selectPortal(portal, e) {\n//     let obj = {}\n//     if (this.selectedModule.length > 0) {\n//       obj = this.selectedModule[0];\n//     }\n//     if (e.checked) {\n//       let list = {}\n//       portal.modulePermission.forEach((value, index, self) => {\n//         if (value.permission.length > 0) {\n//           const rightValues = value.permission.map((rightvalue, rightIndex, rightSelf) => {\n//             return rightvalue.slug;\n//           });\n//           list = { ...list, [value.slug]: rightValues }\n//         }\n//       });\n//       obj[portal.slug] = list\n//       this.selectedModule = [obj];\n//     } else {\n//       if (this.selectedModule.length > 0) {\n//         if (this.selectedModule[0].hasOwnProperty(portal.slug)) {\n//           delete this.selectedModule[0][portal.slug];\n//         }\n//       }\n//     }\n//   }\n//   /** Select all permission of that module */\n//   selectModule(portal_id, module: any, e) {\n//     let obj = {}\n//     if (this.selectedModule.length > 0) {\n//       obj = this.selectedModule[0];\n//     }\n//     if (e.checked) {\n//       let permissionList = module.permission.map(a => (a.slug));\n//       if (obj.hasOwnProperty(portal_id)) {\n//         if (obj[portal_id].hasOwnProperty(module)) {\n//           let modulePermissionIndex = obj[portal_id].indexOf(permissionList);\n//           if (modulePermissionIndex > -1) {\n//             obj[portal_id][module.slug].splice(modulePermissionIndex, 1, permissionList);\n//           } else {\n//             obj[portal_id][module.slug] = permissionList;\n//           }\n//         } else {\n//           obj[portal_id][module.slug] = permissionList;\n//         }\n//       } else {\n//         obj[portal_id] = {};\n//         obj[portal_id][module.slug] = permissionList;\n//         // obj[portal_id][module].push(permissionList);\n//       }\n//       this.selectedModule = [obj];\n//     } else {\n//       if (this.selectedModule.length > 0) {\n//         if (this.selectedModule[0].hasOwnProperty(portal_id)) {\n//           if (this.selectedModule[0][portal_id].hasOwnProperty(module.slug)) {\n//             delete this.selectedModule[0][portal_id][module.slug];\n//           }\n//         }\n//       }\n//     }\n//     this.checkModuleRoles(portal_id);\n//   }\n//   /** Select permission */\n//   selectPermission(portal_id, permission, module, e) {\n//     let obj = {}\n//     if (this.selectedModule.length > 0) {\n//       obj = this.selectedModule[0];\n//     }\n//     if (obj.hasOwnProperty(portal_id)) {\n//       if (obj[portal_id].hasOwnProperty(module)) {\n//         let modulePermissionIndex = obj[portal_id][module].indexOf(permission);\n//         if (modulePermissionIndex > -1) {\n//           obj[portal_id][module].splice(modulePermissionIndex, 1);\n//         } else {\n//           obj[portal_id][module].push(permission);\n//         }\n//       } else {\n//         obj[portal_id][module] = [];\n//         obj[portal_id][module].push(permission);\n//       }\n//     } else {\n//       obj[portal_id] = {};\n//       obj[portal_id][module] = [];\n//       obj[portal_id][module].push(permission);\n//     }\n//     this.selectedModule = [obj];\n//     this.checkModuleRoles(portal_id);\n//   }\n//   getRightsList() {\n//     this.commonService.searchAll('rights', this.gridOption).subscribe(response => {\n//       this.rightsList = response.result.items;\n//       for (let p = 0; p < this.portalList.length; p++) {\n//         this.portalList[p].modulePermission = [];\n//         for (let i = 0; i < this.moduleList.length; i++) {\n//           if (this.portalList[p].id === this.moduleList[i].portal_id) {\n//             this.moduleList[i].permission = [];\n//             this.portalList[p].modulePermission.push(this.moduleList[i]);\n//             for (let j = 0; j < this.rightsList.length; j++) {\n//               if (this.portalList[p].modulePermission[i]) {\n//                 if (this.portalList[p].modulePermission[i].id === this.rightsList[j].module_id) {\n//                   this.portalList[p].modulePermission[i].permission.push(this.rightsList[j]);\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//       for (let i = 0; i < this.moduleList.length; i++) {\n//         this.moduleList[i].permission = [];\n//         for (let j = 0; j < this.rightsList.length; j++) {\n//           if (this.moduleList[i].id === this.rightsList[j].module_id) {\n//             this.moduleList[i].permission.push(this.rightsList[j]);\n//           }\n//         }\n//       }\n//       for (let index = 0; index < this.portalList.length; index++) {\n//         if (this.portalList[index].hasOwnProperty('modulePermission')) {\n//           if (this.portalList[index]['modulePermission'].length > 0) {\n//             let portalId = this.portalList[index]['slug'];\n//             this.selectAllPortalModule[portalId] = [];\n//             for (let indexPermission = 0; indexPermission < this.portalList[index]['modulePermission'].length; indexPermission++) {\n//               if (this.portalList[index]['modulePermission'][indexPermission].hasOwnProperty('permission')) {\n//                 let ModuleIdIndex = this.portalList[index]['modulePermission'][indexPermission]['slug'];\n//                 let ModuleRightsCount = this.portalList[index]['modulePermission'][indexPermission]['permission'].length;\n//                 if (this.allModuleArr.hasOwnProperty(portalId)) {\n//                   this.allModuleArr[portalId][ModuleIdIndex] = ModuleRightsCount;\n//                   this.selectAllPortalModule[portalId][ModuleIdIndex] = false;\n//                 } else {\n//                   this.allModuleArr[portalId] = {};\n//                   this.allModuleArr[portalId]['selectAll'] = false;\n//                   this.selectAllPortalModule[portalId][ModuleIdIndex] = false;\n//                   this.allModuleArr[portalId][ModuleIdIndex] = ModuleRightsCount;\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//       this.checkAllSelect();\n//     });\n//   }\n//   /*\n//   * Check all module is select or not */\n//   checkAllSelect() {\n//     if (this.selectedModule.length > 0) {\n//       Object.keys(this.selectedModule[0]).forEach(portalKey => {\n//         this.checkModuleRoles(portalKey);\n//       });\n//     }\n//     return true;\n//   }\n//   /*\n//   * Check all module selectAll portal permission */\n//   checkModuleRoles(portalKey) {\n//     Object.keys(this.selectAllPortalModule[portalKey]).forEach(rightsKey => {\n//       this.checkLengthOfPermission(portalKey, rightsKey);\n//     });\n//     this.checkSelectAll();\n//   }\n//   /*\n//   * used to check the select all for module (check if module's select all checked or not') */\n//   checkLengthOfPermission(portalKey, rightsKey) {\n//     let length = this.allModuleArr[portalKey][rightsKey];\n//     let rightsKeyLength = 0;\n//     if (this.selectedModule[0][portalKey].hasOwnProperty(rightsKey)) {\n//       rightsKeyLength = this.selectedModule[0][portalKey][rightsKey].length;\n//     }\n//     if (length == rightsKeyLength) {\n//       this.selectAllPortalModule[portalKey][rightsKey] = true;\n//     } else {\n//       this.selectAllPortalModule[portalKey][rightsKey] = false;\n//     }\n//   }\n//   /*\n//   * In this we will check all portal's foreach*/\n//   checkSelectAll() {\n//     let keys = Object.keys(this.selectAllPortalModule);\n//     for (let i = 0; i < keys.length; i++) {\n//       let id = keys[i];\n//       this.checkSelectAllPermission(id);\n//     }\n//   }\n//   /*\n//   * In this we will check permission is selcted or not in the portal module array*/\n//   checkSelectAllPermission(id) {\n//     let value = Object.values(this.selectAllPortalModule[id]);\n//     (value.indexOf(false) !== -1) ? this.allModuleArr[id]['selectAll'] = false : this.allModuleArr[id]['selectAll'] = true;\n//   }\n//   /*\n//   * used to get the portal list form DB*/\n//   getPortalList() {\n//     this.commonService.searchAll('portals', this.gridOption).subscribe(response => {\n//       this.portalList = response.result.items;\n//     });\n//   }\n//   GetCompanyGroupDetails(){\n//     this.commonService.getCompanyGroupDetails().subscribe(response => {\n//       this.companyGroupDetailsList = response.result\n//     })\n//   }\n//   selectCountry() {\n//    this.countryid = this.roleForm.value.country\n//     this.getstate(this.countryid);\n//   }\n//   getSector() {\n//     this.commonService.getSector().subscribe(response => {\n//       this.sectorList = response.result\n//     })\n//   }\n//   getOverseas() {\n//     this.commonService.getOverseas().subscribe(response => {\n//       this.overseasList = response.result\n//     })\n//   }\n//   getCountry() {\n//     this.commonService.getCountry().subscribe(response => {\n//       this.countryList = response.result\n//     })\n//   }\n//   getstate(id) {\n//     this.commonService.getState(id).subscribe(response => {\n//       this.stateList = response.result\n//     })\n//   }\n//   getIndustry() {\n//     this.commonService.getIndustry().subscribe(response => {\n//       this.industryList = response.result\n//     })\n//   }\n//   getClientType() {\n//     this.commonService.getclientType().subscribe(response => {\n//       this.clientTypeList = response.result\n//     })\n//   }\n//   getTypeOfPoc() {\n//     this.commonService.getTypeOfPoc().subscribe(response => {\n//       this.pocTypeList = response.result\n//     })\n//   }\n//   getTaxNumber() {\n//     this.commonService.getTaxNumber().subscribe(response => {\n//       this.TaxnumberList = response.result\n//     })\n//   }\n//   getBillingCurrency() {\n//     this.commonService.getBillingCurrency().subscribe(response => {\n//       this.currencyList = response.result\n//     })\n//   }\n//   getInvoiceGenerateFrom() {\n//     this.commonService.getInvoiceGenerateFrom().subscribe(response => {\n//       this.invoiceGenerateFormList = response.result\n//     })\n//   }\n//   getPayment() {\n//     this.commonService.getPayment().subscribe(response => {\n//       this.paymentList = response.result\n//     })\n//   }\n//   getInvoiceSentBy() {\n//     this.commonService.getInvoiceSentBy().subscribe(response => {\n//       this.invoiceSentByList = response.result\n//     })\n//   }\n//   getInvoiceSentVia() {\n//     this.commonService.getInvoiceSentVia().subscribe(response => {\n//       this.invoiceSentViaList = response.result\n//     })\n//   }\n//   getBankdetails() {\n//     this.commonService.getBankdetails().subscribe(response => {\n//       this.bankdetailsList = response.result\n//     })\n//   }\n// }","map":null,"metadata":{},"sourceType":"script"}