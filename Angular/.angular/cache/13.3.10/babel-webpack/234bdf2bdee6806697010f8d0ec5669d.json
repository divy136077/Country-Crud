{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_metronic/core/services/common.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"ngx-chips\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@ngx-translate/core\";\n\nfunction AddCategoryDialogComponent_mat_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cat_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", cat_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", cat_r2.name, \" \");\n  }\n}\n\nfunction AddCategoryDialogComponent_mat_error_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"AUTH.VALIDATION.REQUIRED_FIELD\"), \" \");\n  }\n}\n\nexport let AddCategoryDialogComponent = /*#__PURE__*/(() => {\n  class AddCategoryDialogComponent {\n    /**\r\n     * Component constructor\r\n     *\r\n     * @param dialogRef: MatDialogRef<DeleteEntityDialogComponent>\r\n     * @param templateId: any\r\n     */\n    constructor(commonService, dialogRef, toastr, fb, templateId) {\n      this.commonService = commonService;\n      this.dialogRef = dialogRef;\n      this.toastr = toastr;\n      this.fb = fb;\n      this.templateId = templateId;\n      this.categoriesArr = [];\n      this.itemsdrop = [];\n      this.initForm();\n    }\n    /**\r\n     * On init\r\n    */\n\n\n    ngOnInit() {\n      this.getAllCategories();\n      this.getAllLabel();\n    }\n\n    getAllCategories() {\n      this.commonService.getAllCategories().subscribe(res => {\n        this.categoriesArr = res.items;\n        this.commonService.getcategoryById(this.templateId.templaId).subscribe(response => {\n          this.categories.patchValue({\n            \"items\": response.items[0].label ? JSON.parse(response.items[0].label) : '',\n            'created_by': response.items[0].categories_id ? response.items[0].categories_id : 2\n          });\n        });\n      }, err => {\n        this.isSubmitted = false;\n      });\n    }\n\n    getAllLabel() {\n      this.commonService.getLabels().subscribe(res => {\n        if (res.status_code == 200) {\n          var arr = [];\n\n          for (let i = 0; i < res.items.length; i++) {\n            arr.push(JSON.parse(res.items[i].label));\n          }\n\n          arr = [...arr];\n          let tmp = [];\n\n          for (let i = 0; i < arr.length; i++) {\n            tmp = tmp.concat(arr[i]);\n          }\n\n          this.itemsdrop = tmp.filter((v, i, a) => a.findIndex(t => t.value === v.value && t.name === v.name) === i);\n        }\n      });\n    }\n\n    get f() {\n      return this.categories.controls;\n    }\n    /**\r\n     * Close dialog with false result\r\n     */\n\n\n    cancel() {\n      this.dialogRef.close();\n    }\n\n    initForm() {\n      this.categories = this.fb.group({\n        items: ['', Validators.required],\n        created_by: ['', Validators.required],\n        templateId: this.templateId.templaId\n      });\n    }\n    /**\r\n     * Checking control validation\r\n     *\r\n     * @param controlName: string => Equals to formControlName\r\n     * @param validationType: string => Equals to valitors name\r\n     */\n\n\n    isControlHasError(controlName, validationType, type, index, name) {\n      const control = this.categories.controls[controlName];\n\n      if (!control) {\n        return false;\n      }\n\n      const result = control.hasError(validationType) && (control.dirty || control.touched);\n      return result;\n    }\n    /**\r\n     * Close dialog with true result\r\n     */\n\n\n    categorieAdd() {\n      this.isSubmitted = true;\n      const controls = this.categories.controls; // check form\n\n      if (this.categories.invalid) {\n        Object.keys(controls).forEach(controlName => controls[controlName].markAsTouched());\n        this.isSubmitted = false;\n        return;\n      }\n\n      const data = {\n        id: this.categories.value.templateId,\n        label: JSON.stringify(this.categories.value.items),\n        categories_id: this.categories.value.created_by\n      };\n      this.commonService.createCategorie(data).subscribe(res => {\n        this.isSubmitted = false;\n        let resArr = res;\n\n        if (resArr.message === 'success' || resArr.status === 1) {\n          this.toastr.success(resArr.message, 'Success!');\n          this.getAllLabel();\n        } else {\n          this.toastr.error(resArr.message.id, 'Error!');\n        }\n\n        this.dialogRef.close(true);\n      }, err => {\n        this.isSubmitted = false;\n      });\n    }\n\n  }\n\n  AddCategoryDialogComponent.ɵfac = function AddCategoryDialogComponent_Factory(t) {\n    return new (t || AddCategoryDialogComponent)(i0.ɵɵdirectiveInject(i1.CommonService), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  AddCategoryDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddCategoryDialogComponent,\n    selectors: [[\"add-category-dialog\"]],\n    decls: 35,\n    vars: 9,\n    consts: [[1, \"modal-header\"], [1, \"modal-title\", \"text-white\"], [1, \"kt-portlet__head-icon\", \"kt-hide\"], [1, \"la\", \"la-gear\"], [1, \"kt-form\"], [1, \"form\", \"form-label-left\", 3, \"formGroup\"], [1, \"modal-body\"], [1, \"form-group\", \"row\"], [\"for\", \"example-text-input\", 1, \"col-xl-3\", \"col-lg-3\", \"col-form-label\"], [1, \"text-danger\"], [\"formControlName\", \"items\"], [3, \"appendToBody\", \"autocompleteItems\", \"showDropdownIfEmpty\", \"dynamicUpdate\", \"keepOpen\"], [1, \"col-9\"], [\"formControlName\", \"created_by\", \"id\", \"created_by\", \"placeholder\", \" Please Select\", \"title\", \" Please Select\", 1, \"form-control\", \"form-control-lg\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"modal-footer\", \"text-right\"], [1, \"kt-form__actions\", \"kt-form__actions--sm\"], [\"mat-button\", \"\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"mat-button\", \"\", \"color\", \"primary\", 1, \"btn\", \"btn-green\", \"text-white\", 3, \"disabled\", \"click\"], [3, \"value\"]],\n    template: function AddCategoryDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"div\");\n        i0.ɵɵelementStart(2, \"div\", 0);\n        i0.ɵɵelementStart(3, \"h3\", 1);\n        i0.ɵɵtext(4, \"Add Category\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"span\", 2);\n        i0.ɵɵelement(6, \"em\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"form\", 5);\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵelementStart(11, \"label\", 8);\n        i0.ɵɵtext(12, \"Labels \");\n        i0.ɵɵelementStart(13, \"span\", 9);\n        i0.ɵɵtext(14, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"tag-input\", 10);\n        i0.ɵɵelement(16, \"tag-input-dropdown\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 7);\n        i0.ɵɵelementStart(18, \"label\", 8);\n        i0.ɵɵtext(19, \"Category\");\n        i0.ɵɵelementStart(20, \"span\", 9);\n        i0.ɵɵtext(21, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 12);\n        i0.ɵɵelementStart(23, \"mat-select\", 13);\n        i0.ɵɵelementStart(24, \"mat-option\");\n        i0.ɵɵtext(25, \" Please Select \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, AddCategoryDialogComponent_mat_option_26_Template, 2, 2, \"mat-option\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, AddCategoryDialogComponent_mat_error_27_Template, 3, 3, \"mat-error\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 16);\n        i0.ɵɵelementStart(29, \"div\", 17);\n        i0.ɵɵelementStart(30, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function AddCategoryDialogComponent_Template_button_click_30_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(31, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(32, \" \\u00A0\\u00A0 \");\n        i0.ɵɵelementStart(33, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function AddCategoryDialogComponent_Template_button_click_33_listener() {\n          return ctx.categorieAdd();\n        });\n        i0.ɵɵtext(34, \" Save \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.categories);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"appendToBody\", false)(\"autocompleteItems\", ctx.itemsdrop)(\"showDropdownIfEmpty\", true)(\"dynamicUpdate\", false)(\"keepOpen\", false);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", ctx.categoriesArr);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isControlHasError(\"created_by\", \"required\"));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"disabled\", ctx.isSubmitted ? true : false);\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.TagInputComponent, i4.NgControlStatus, i4.FormControlName, i5.TagInputDropdown, i6.MatSelect, i7.MatOption, i8.NgForOf, i8.NgIf, i9.MatButton, i10.MatError],\n    pipes: [i11.TranslatePipe],\n    styles: [\".modal-header[_ngcontent-%COMP%]{background:#12121b}.modal-body[_ngcontent-%COMP%], .modal-footer[_ngcontent-%COMP%]{background:#1b1b28;color:#a2a3b7}\"]\n  });\n  return AddCategoryDialogComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}