{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport jwt_decode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CommonService = /*#__PURE__*/(() => {\n  class CommonService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.baseURL;\n    }\n\n    searchAll(moduleNameServiceRoute, searchObj) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/search\", searchObj, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'authorization': 'Bearer ' + localStorage.getItem('authToken')\n        })\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getBackendMenu(moduleNameServiceRoute, searchObj) {\n      this.getBaseURL(moduleNameServiceRoute); // if (searchObj) {\n\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/menu-list\", searchObj, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'authorization': 'Bearer ' + localStorage.getItem('authToken')\n        })\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    updateStatusMany(obj, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/toggle-status\", obj).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    deleteStatusMany(obj, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/delete-many\", obj).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    createClient(resource) {\n      return this.http.post(this.baseUrl + \"user/clients/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    updateClient(resource, id) {\n      return this.http.put(this.baseUrl + \"user/clients/update/\" + id, resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    delete(id, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.delete(this.baseUrl + moduleNameServiceRoute + \"/\" + id, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getOne(id, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getModuleOne(id, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/getmodule/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    create(resource, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createAssign(resource) {\n      // this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + \"assign-project/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createMilestone(resource) {\n      // this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + \"milestone/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    bulkimport(resource, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + '/bulk-import', resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    update(resource, moduleNameServiceRoute, id) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.put(this.baseUrl + moduleNameServiceRoute + \"/\" + id, resource, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'authorization': 'Bearer ' + localStorage.getItem('authToken')\n        })\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getLanguage() {\n      const tokenData = this.getDecodedAccessToken();\n      return tokenData.language.items;\n    }\n\n    getDecodedAccessToken() {\n      const authToken = localStorage.getItem(\"authToken\");\n      return jwt_decode(authToken);\n    }\n\n    validateVAT(resource, moduleNameServiceRoute) {\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/validateVAT\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    validateIBAN(resource, moduleNameServiceRoute) {\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/validateIBAN\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    validateClientCount(resource, moduleNameServiceRoute) {\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/validateClientCount\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    validateUserCount(resource, moduleNameServiceRoute) {\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/validateUserCount\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAlltemplateTypeList(moduleNameServiceRoute, local) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/list/\" + local).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getClientList(userId, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/clients/\" + userId).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllClientArr(moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/userlist\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllCountryArr(moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/countrylist\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deleteClient(id, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/clients/delete/\" + id, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deleteClientUser(id) {\n      return this.http.post(this.baseUrl + \"/userclient/delete/\" + id, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    checkPassword(resource, moduleNameServiceRoute) {\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/checkPassword\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    resetPassword(resource, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/reset-password\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    changePassword(resource, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.post(this.baseUrl + moduleNameServiceRoute + \"/change-password\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    verifyEmail(resource, moduleNameServiceRoute) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/verify?id=\" + resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getAllMappingTypeList(moduleNameServiceRoute, local) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/list/\" + local).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getTemplateById(obj) {\n      return this.http.post(this.baseUrl + \"template/\" + obj.id, {\n        locale: obj.locale\n      }).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllColumnTypeList(moduleNameServiceRoute, local) {\n      this.getBaseURL(moduleNameServiceRoute);\n      return this.http.get(this.baseUrl + moduleNameServiceRoute + \"/listcolumntype/\" + local).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllCategories() {\n      return this.http.post(this.baseUrl + \"category\", {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getClienttypeList(id) {\n      return this.http.post(this.baseUrl + \"userclient/getPermission/\" + id, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getClienttypeListbyclientId(id) {\n      return this.http.get(this.baseUrl + \"userclient/getclientDetails/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    createCategorie(resource) {\n      return this.http.post(this.baseUrl + \"category/create\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    createBuckets(resource) {\n      return this.http.post(this.baseUrl + \"buckets\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getcategoryById(id) {\n      return this.http.get(this.baseUrl + \"category/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getLabels() {\n      return this.http.get(this.baseUrl + \"template/label\");\n    }\n\n    getFolders(obj) {\n      return this.http.post(this.baseUrl + \"buckets/folder\", obj);\n    }\n\n    uploadFolders(resource) {\n      return this.http.post(this.baseUrl + \"buckets/folderupload\", resource).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    getUserCount() {\n      return this.http.get(this.baseUrl + \"user/getusercount\").pipe(map(response => {\n        console.log(508, response);\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n      ;\n    }\n\n    getBaseURL(moduleNameServiceRoute) {\n      this.baseUrl = moduleNameServiceRoute == 'user' ? this.baseUrl = environment.baseAuthURL : moduleNameServiceRoute == 'cms' || moduleNameServiceRoute == 'language' || moduleNameServiceRoute == 'emailTemplate' ? this.baseUrl = environment.baseCmsURL : moduleNameServiceRoute == 'setting' ? this.baseUrl = environment.baseSettingURL : moduleNameServiceRoute == 'setting-type' ? this.baseUrl = environment.baseSettingURL : this.baseUrl = environment.baseAclURL;\n      return this.baseUrl;\n    }\n\n    getAllStatus() {\n      return this.http.get(this.baseUrl + \"project-status/getallStatus\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getCompanyGroupDetails() {\n      return this.http.get(this.baseUrl + \"sector/getallsector\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getSector() {\n      return this.http.get(this.baseUrl + \"sector/getallsector\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getOverseas() {\n      return this.http.get(this.baseUrl + \"domestic/getalldomestic\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getCountry() {\n      return this.http.get(this.baseUrl + \"country/getallcountry\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getState(id) {\n      return this.http.get(this.baseUrl + \"state/\" + id).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getIndustry() {\n      return this.http.get(this.baseUrl + \"industry/getallindustry\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectType() {\n      return this.http.get(this.baseUrl + \"project-type/getallType\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getclientType() {\n      return this.http.get(this.baseUrl + \"client-type/getallclienttype\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectManager() {\n      return this.http.get(this.baseUrl + \"project-manager/getAllManager\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getTypeOfPoc() {\n      return this.http.get(this.baseUrl + \"poctype/getallpoctype\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectLead() {\n      return this.http.get(this.baseUrl + \"project-lead/getAllLead\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getTaxNumber() {\n      return this.http.get(this.baseUrl + \"tax/getalltax\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectTeamMember() {\n      return this.http.get(this.baseUrl + \"project-team-member/getAllTeamMember\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getBillingCurrency() {\n      return this.http.get(this.baseUrl + \"currency/getallcurrency\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllTimeZone() {\n      return this.http.get(this.baseUrl + \"time-zone/getAllTimeZone\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getInvoiceGenerateFrom() {\n      return this.http.get(this.baseUrl + \"invoice-generate-from/getallinvoice-generate-from\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectStatusFrequency() {\n      return this.http.get(this.baseUrl + \"project-status-frequency/getAllProjectStatusFrequency\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getPayment() {\n      return this.http.get(this.baseUrl + \"paymentterm/getallpaymentterm\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllDayOfMonth() {\n      return this.http.get(this.baseUrl + \"day-of-month/getAllDayOfMonth\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getInvoiceSentBy() {\n      return this.http.get(this.baseUrl + \"invoicesentby/getallinvoicesentby\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllProjectCallFrequency() {\n      return this.http.get(this.baseUrl + \"project-call-frequency/getAllCallFrequency\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getInvoiceSentVia() {\n      return this.http.get(this.baseUrl + \"invoicesentvia/getallinvoicesentvia\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllMilestonePercentage() {\n      return this.http.get(this.baseUrl + \"milestone-percentage/getAllMilestonePercentage\").pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getBankdetails() {\n      return this.http.get(this.baseUrl + \"bank-detail/getallbank-detail\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllResourceCategory() {\n      return this.http.get(this.baseUrl + \"resource-category/getAllResourceCategory\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllResourceName() {\n      return this.http.get(this.baseUrl + \"resource-name/getAllResourceName\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllResourceBand() {\n      return this.http.get(this.baseUrl + \"resource-band/getAllResourceBand\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getAllMilestoneData() {\n      return this.http.get(this.baseUrl + \"milestone/getAllMilestone\").pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    deleteMilestoneUser(Id) {\n      return this.http.delete(this.baseUrl + \"milestone/\" + Id, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n    getOneData(id) {\n      return this.http.get(this.baseUrl + \"milestone/\" + id, {}).pipe(map(response => {\n        console.log(response, response.result, 'one');\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    updateData(id, data) {\n      console.log(id, 'uujj');\n      return this.http.put(this.baseUrl + \"milestone/\" + id, data, {}).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return null;\n      }));\n    }\n\n    toggelPoc(data) {\n      return this.http.post(this.baseUrl + \"milestone/toggle-status/\", data).pipe(map(response => {\n        return response;\n      }), catchError(err => {\n        return err;\n      }));\n    }\n\n  }\n\n  CommonService.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}