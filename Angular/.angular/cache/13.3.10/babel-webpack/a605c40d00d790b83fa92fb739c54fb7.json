{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { SubheaderModel } from '../_models/subheader.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../core\"; // kt_header_menu\n// kt_aside_menu\n\nexport let SubheaderService = /*#__PURE__*/(() => {\n  class SubheaderService {\n    constructor(layout) {\n      this.layout = layout;\n      this.titleSubject = new BehaviorSubject('Dashboard');\n      this.descriptionSubject = new BehaviorSubject('');\n      this.breadCrumbsSubject = new BehaviorSubject([]);\n      this.subheaderVersionSubject = new BehaviorSubject('v1'); // [1-6]\n      // private fields\n\n      this.unsubscribe = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n      this.setDefaultSubheader();\n    }\n\n    setDefaultSubheader() {\n      this.setSubheaderVersion(this.layout.getProp('subheader.layoutVersion'));\n    }\n\n    setBreadcrumbs(breadcrumbs = []) {\n      this.breadCrumbsSubject.next(breadcrumbs);\n    }\n\n    setTitle(title = '') {\n      this.titleSubject.next(title);\n    }\n\n    setDescription(description) {\n      this.descriptionSubject.next(description);\n    }\n\n    setSubheaderVersion(version = 'v1') {\n      this.subheaderVersionSubject.next(version);\n    } // use this method in SubheaderWrapper\n\n\n    updateAfterRouteChanges(pathName) {\n      const aside = this.getBreadcrumbsAndTitle('kt_aside_menu', pathName);\n      const header = this.getBreadcrumbsAndTitle('kt_header_menu', pathName);\n      const breadcrumbs = aside && aside.breadcrumbs.length > 0 ? aside.breadcrumbs : header.breadcrumbs;\n      this.setBreadcrumbs(breadcrumbs);\n      this.setTitle(aside && aside.title && aside.title.length > 0 ? aside.title : header.title);\n    }\n\n    getLinksFromMenu(menu) {\n      const parentLiElements = Array.from(menu.getElementsByClassName('menu-item-open') || []);\n      const childLiElements = Array.from(menu.getElementsByClassName('menu-item-active') || []);\n      const result = [];\n      parentLiElements.forEach(el => {\n        const links = Array.from(el.getElementsByClassName('menu-link') || []);\n\n        if (links && links.length > 0) {\n          const aLink = links[0];\n\n          if (aLink.href && aLink.href.length && aLink.href.length > 0 && aLink.innerHTML !== '/') {\n            result.push(aLink);\n          }\n        }\n      });\n      childLiElements.forEach(el => {\n        const links = Array.from(el.getElementsByClassName('menu-link') || []);\n\n        if (links && links.length > 0) {\n          const aLink = links[0];\n\n          if (aLink.href && aLink.href.length && aLink.href.length > 0 && aLink.innerHTML !== '/') {\n            result.push(aLink);\n          }\n        }\n      });\n      return result;\n    }\n\n    getBreadcrumbsAndTitle(menuId, pathName) {\n      const result = new SubheaderModel();\n      const menu = document.getElementById(menuId);\n\n      if (!menu) {\n        return result;\n      }\n\n      const activeLinksArray = this.getLinksFromMenu(menu);\n      const activeLinks = activeLinksArray.filter(el => el.tagName === 'A');\n\n      if (!activeLinks) {\n        return result;\n      }\n\n      activeLinks.forEach(link => {\n        const titleSpans = link.getElementsByClassName('menu-text');\n\n        if (titleSpans) {\n          const titleSpan = Array.from(titleSpans).find(t => t.innerHTML && t.innerHTML.trim().length > 0);\n\n          if (titleSpan) {\n            result.breadcrumbs.push({\n              title: titleSpan.innerHTML,\n              linkPath: link.pathname,\n              linkText: titleSpan.innerHTML\n            });\n          }\n        }\n      });\n      result.title = this.getTitle(result.breadcrumbs, pathName);\n      return result;\n    }\n\n    parseUrlAndReturnPathname(href) {\n      const url = document.createElement('a');\n      url.href = 'https://developer.mozilla.org:8080/en-US/search?q=URL#search-results-close-container';\n      return url.pathname;\n    }\n\n    getTitle(breadCrumbs, pathname) {\n      if (!breadCrumbs || !pathname) {\n        return '';\n      }\n\n      const length = breadCrumbs.length;\n\n      if (!length) {\n        return '';\n      }\n\n      return breadCrumbs[length - 1].title;\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe.forEach(sb => sb.unsubscribe());\n    }\n\n  }\n\n  SubheaderService.ɵfac = function SubheaderService_Factory(t) {\n    return new (t || SubheaderService)(i0.ɵɵinject(i1.LayoutService));\n  };\n\n  SubheaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubheaderService,\n    factory: SubheaderService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubheaderService;\n})();","map":null,"metadata":{},"sourceType":"module"}