{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { PLATFORM_ID } from '@angular/core';\nimport * as FormData from 'form-data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/modules/auth\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngx-translate/core\";\nexport let InterceptService = /*#__PURE__*/(() => {\n  class InterceptService {\n    // intercept request and add token\n    constructor( // public loaderService: LoaderService,\n    authService, toastr, router, translateService, platformId) {\n      this.authService = authService;\n      this.toastr = toastr;\n      this.router = router;\n      this.translateService = translateService;\n      this.platformId = platformId;\n      this.requests = [];\n    }\n\n    removeRequest(req) {\n      const i = this.requests.indexOf(req);\n\n      if (this.requests && this.requests.length > 0) {\n        this.authService.displayLoader(true);\n      } else {\n        this.authService.displayLoader(false);\n      }\n\n      if (i >= 0) {\n        this.requests.splice(i, 1);\n      }\n    }\n\n    intercept(request, next) {\n      if (request.body instanceof FormData) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: 'Bearer ' + localStorage.getItem('authToken')\n          }\n        });\n      } else {\n        if (localStorage.getItem('authToken') && localStorage.getItem('authToken') !== null && localStorage.getItem('authToken') !== undefined && localStorage.getItem('language') && localStorage.getItem('language') !== null && localStorage.getItem('language') !== undefined) {\n          request = request.clone({\n            setHeaders: {\n              // 'Content-Type': 'application/json',\n              'Authorization': 'Bearer ' + localStorage.getItem('authToken')\n            }\n          });\n        } else {\n          request = request.clone({\n            setHeaders: {\n              // 'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + localStorage.getItem('authToken')\n            }\n          });\n        }\n      }\n\n      this.requests.push(request);\n      return Observable.create(observer => {\n        const subscription = next.handle(request).subscribe(event => {\n          if (event instanceof HttpResponse) {\n            observer.next(event);\n          }\n        }, err => {\n          var _a, _b, _c, _d, _e;\n\n          console.log('err', err);\n\n          if (err.status === 403) {\n            this.toastr.error((_a = err.error) === null || _a === void 0 ? void 0 : _a.message, 'Error!');\n          } else if (err.status === 500) {\n            this.toastr.error((_b = err.error) === null || _b === void 0 ? void 0 : _b.message, 'Error!');\n          } else {\n            if (((_c = err.error) === null || _c === void 0 ? void 0 : _c.message) && err.status !== 404) {\n              this.router.navigate(['/login']).then(() => {\n                var _a;\n\n                this.toastr.error((_a = err.error) === null || _a === void 0 ? void 0 : _a.message, 'Error!');\n              });\n            } else {\n              if ((_d = err.error) === null || _d === void 0 ? void 0 : _d.message) {\n                this.toastr.error((_e = err.error) === null || _e === void 0 ? void 0 : _e.message, 'Error!');\n              }\n            }\n          }\n\n          return throwError(err);\n        }, () => {\n          observer.complete();\n        });\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n    }\n\n  }\n\n  InterceptService.ɵfac = function InterceptService_Factory(t) {\n    return new (t || InterceptService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.TranslateService), i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  InterceptService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InterceptService,\n    factory: InterceptService.ɵfac\n  });\n  return InterceptService;\n})();","map":null,"metadata":{},"sourceType":"module"}