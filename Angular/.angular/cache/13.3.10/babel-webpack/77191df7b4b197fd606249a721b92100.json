{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Workbook } from 'exceljs';\nimport * as fs from 'file-saver';\nimport * as i0 from \"@angular/core\";\nexport let ExcelService = /*#__PURE__*/(() => {\n  class ExcelService {\n    constructor() {}\n\n    generateExcel(ExcelData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Excel Title, Header, Data\n        const ExcelDataArr = [];\n        const ExcelDataFillArr = []; // Create workbook and worksheet\n\n        const workbook = new Workbook();\n        let worksheetName = '';\n\n        for (let i = 0; i < ExcelData.length; i++) {\n          if (ExcelData[i]) {\n            for (let j = 0; j < ExcelData[i].length; j++) {\n              if (ExcelData[i][j].cell) {\n                if (ExcelData[i][j].cell.indexOf('A') > -1) {\n                  if (i == 0) {\n                    worksheetName = ExcelData[i][j].value;\n                  }\n\n                  ExcelDataArr.push(Array(ExcelData[i][j].value));\n                  ExcelDataFillArr.push(ExcelData[i][j].settings);\n                }\n              }\n            }\n          }\n        }\n\n        const worksheet = workbook.addWorksheet(worksheetName);\n\n        for (let i = 0; i < ExcelDataArr.length; i++) {\n          let row = worksheet.addRow(ExcelDataArr[i]);\n          let fileter = ExcelDataFillArr[i];\n          let font_color = fileter.font_color.replace('#', '');\n          let fill_color = fileter.fill_color.replace('#', '');\n          let qty = row.getCell(1);\n          qty.font = {\n            name: fileter.font_name,\n            size: fileter.font_size,\n            bold: fileter.font_bold,\n            color: {\n              argb: font_color\n            }\n          };\n          qty.fill = {\n            type: 'pattern',\n            pattern: 'solid',\n            fgColor: {\n              argb: fill_color\n            }\n          };\n        }\n\n        worksheet.getColumn(1).width = 30; // Generate Excel File with given name\n\n        workbook.xlsx.writeBuffer().then(ExcelDataArr => {\n          const blob = new Blob([ExcelDataArr], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          });\n          fs.saveAs(blob, worksheetName + '.xlsx');\n        });\n      });\n    }\n\n  }\n\n  ExcelService.ɵfac = function ExcelService_Factory(t) {\n    return new (t || ExcelService)();\n  };\n\n  ExcelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExcelService,\n    factory: ExcelService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExcelService;\n})();","map":null,"metadata":{},"sourceType":"module"}