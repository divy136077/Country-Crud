{"ast":null,"code":"import { BehaviorSubject, Subject, throwError } from 'rxjs';\nimport { map, catchError, finalize } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth-http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/common/http\";\nconst API_USERS_URL = environment.baseURL + 'user';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(authHttpService, router, toastr, http) {\n      this.authHttpService = authHttpService;\n      this.router = router;\n      this.toastr = toastr;\n      this.http = http; // private fields\n\n      this.unsubscribe = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n      this.authLocalStorageToken = `authToken`;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('userDetail')));\n      this.userListDataSubject = new Subject();\n      this.isLoadingSubject = new BehaviorSubject(false);\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('userDetail')));\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.isLoading$ = this.isLoadingSubject.asObservable();\n      this.userListData$ = this.userListDataSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    set currentUserValue(user) {\n      this.currentUserSubject.next(user);\n    } // public methods\n\n\n    login(email, password) {\n      return this.http.post(API_USERS_URL + '/login', {\n        email,\n        password\n      }).pipe(map(res => {\n        console.log(res);\n\n        if (res && res.status === true) {\n          const obj = {\n            username: res.result.username,\n            first_name: res.result.first_name,\n            last_name: res.result.last_name,\n            id: res.result.id,\n            email: res.result.email,\n            phone: res.result.phone,\n            profile_image: res.result.profile_image\n          };\n          const langObj = {\n            \"id\": 1,\n            \"locale\": \"en\",\n            \"order\": 1,\n            \"name\": \"English\",\n            \"status\": 1,\n            \"createdAt\": \"2019-08-02T12:25:34.228Z\",\n            \"updatedAt\": \"2019-08-02T12:25:34.228Z\"\n          };\n          localStorage.setItem('userDetail', JSON.stringify(obj));\n          localStorage.setItem('authToken', res.result.token);\n          localStorage.setItem('language', JSON.stringify(langObj));\n          this.currentUserSubject.next(obj);\n        }\n\n        return res;\n      }));\n    }\n\n    logout() {\n      localStorage.clear();\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('userDetail')));\n      this.toastr.success('success', 'logout Successfully');\n      this.router.navigateByUrl('/auth/login');\n    }\n\n    logouttwo() {\n      localStorage.clear();\n      var currentdate = new Date();\n      var datetime = currentdate.getFullYear() + \"-\" + (\"0\" + (currentdate.getMonth() + 1)).slice(-2) + \"-\" + currentdate.getDate() + \"T\" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds() + \"Z\"; // var url = `https://adfs.corpnet.co.in/adfs/ls?wa=wsignout1.0&wct=${datetime}&wreply=${environment.logoutUrl}`;\n      // window.location.assign(url);\n    } // need create new user then login\n\n\n    registration(user) {\n      this.isLoadingSubject.next(true);\n      return this.authHttpService.createUser(user).pipe(map(res => {\n        this.isLoadingSubject.next(false);\n\n        if (res && res.status) {\n          return res;\n        }\n      }), catchError(err => {\n        return throwError(err.error);\n      }));\n    }\n\n    forgotPassword(email) {\n      this.isLoadingSubject.next(true);\n      return this.authHttpService.forgotPassword(email).pipe(finalize(() => this.isLoadingSubject.next(false)));\n    }\n\n    update(id, data) {\n      return this.http.put(API_USERS_URL + '/' + id, data).pipe(map(user => {\n        if (user.code == 200 && user.status) {\n          const obj = {\n            username: user.result.username,\n            first_name: user.result.first_name,\n            last_name: user.result.last_name,\n            id: user.result.id,\n            email: user.result.email,\n            phone: user.result.phone,\n            profile_image: user.result.profile_image\n          };\n          localStorage.setItem('userDetail', JSON.stringify(obj));\n          localStorage.setItem('authToken', user.result.token);\n          this.currentUserSubject.next(obj);\n        }\n\n        return user;\n      }));\n    }\n\n    updatePasswordByEmail(email, password) {\n      return this.http.put(API_USERS_URL + '/confirm-password/' + email, password);\n    } // private methods\n\n\n    setAuthFromLocalStorage(auth) {\n      // store auth authToken/refreshToken/epiresIn in local storage to keep user logged in between page refreshes\n      if (auth && auth.authToken) {\n        localStorage.setItem(this.authLocalStorageToken, JSON.stringify(auth.authToken));\n        return true;\n      }\n\n      return false;\n    }\n\n    setUserDetails(token) {\n      const data = jwt_decode(token);\n      const obj = {\n        username: data.device_token.username,\n        first_name: data.device_token.first_name,\n        last_name: data.device_token.last_name,\n        id: data.device_token.id,\n        email: data.device_token.email,\n        phone: data.device_token.phone\n      };\n      localStorage.setItem('userDetail', JSON.stringify(obj));\n      localStorage.setItem('authToken', token);\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('userDetail')));\n    }\n\n    getAuthFromLocalStorage() {\n      try {\n        const authData = localStorage.getItem(this.authLocalStorageToken);\n        return authData;\n      } catch (error) {\n        console.error(error);\n        return undefined;\n      }\n    }\n\n    displayLoader(value) {\n      this.isLoadingSubject.next(value);\n    }\n\n    setUserListData(data) {// this.userListDataSubject.next(data);\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe.forEach(sb => sb.unsubscribe());\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AuthHTTPService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}