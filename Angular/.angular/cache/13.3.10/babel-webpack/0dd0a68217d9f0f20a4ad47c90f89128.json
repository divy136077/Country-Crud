{"ast":null,"code":"// RxJS\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../_metronic/core/services/acl.service\";\nexport let ModuleGuard = /*#__PURE__*/(() => {\n  class ModuleGuard {\n    constructor(router, aclService) {\n      this.router = router;\n      this.aclService = aclService;\n    }\n\n    canActivate(route, state) {\n      let tokenData = this.aclService.getDecodedAccessToken();\n      console.log(17, tokenData.device_token.permissions);\n      const permissionArr = tokenData.device_token.user_permission ? JSON.parse(tokenData.device_token.user_permission) : JSON.parse(tokenData.device_token.permissions);\n      console.log(19, permissionArr);\n      const permission = permissionArr[0];\n      const finObj = Object.values(permission);\n      const arr = [];\n      const data = Object.assign({}, ...finObj);\n      console.log(340, data);\n      const moduleName = route.data['moduleName'];\n      console.log(27, moduleName);\n\n      if (!moduleName) {\n        return of(false);\n      } else if (permission) {\n        let permissions = data;\n\n        if (permissions.hasOwnProperty(moduleName[0])) {\n          if (permissions[moduleName[0]].includes(moduleName[1])) {\n            return of(true);\n          } else {\n            this.router.navigateByUrl('/error/403');\n            return of(false);\n          }\n        } else {\n          this.router.navigateByUrl('/error/403');\n          return of(false);\n        }\n      } else {\n        this.router.navigateByUrl('/error/403');\n        return of(false);\n      }\n    }\n\n  }\n\n  ModuleGuard.ɵfac = function ModuleGuard_Factory(t) {\n    return new (t || ModuleGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AclService));\n  };\n\n  ModuleGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModuleGuard,\n    factory: ModuleGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return ModuleGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}