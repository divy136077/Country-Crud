{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport jwt_decode from 'jwt-decode';\nimport { Validators } from '@angular/forms';\nimport { projectName } from 'src/app/constant/constant';\nimport { RegexEnum } from 'src/app/constant/regex';\nimport { confirmPassword } from 'src/app/modules/auth/confirm-password/confirm-password.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../_services/auth.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction ConfirmPasswordComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"AUTH.VALIDATION.REQUIRED_FIELD\"), \" \");\n  }\n}\n\nfunction ConfirmPasswordComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"AUTH.VALIDATION.INVALID_PASSWORD\"), \" \");\n  }\n}\n\nfunction ConfirmPasswordComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"AUTH.VALIDATION.REQUIRED_FIELD\"), \" \");\n  }\n}\n\nfunction ConfirmPasswordComponent_mat_error_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"AUTH.VALIDATION.INVALID_PASSWORD\"), \" \");\n  }\n}\n\nfunction ConfirmPasswordComponent_mat_error_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"AUTH.VALIDATION.MATCH_PASSWORD\"), \" \");\n  }\n}\n\nexport let ConfirmPasswordComponent = /*#__PURE__*/(() => {\n  class ConfirmPasswordComponent {\n    constructor(fb, titleService, url, authService, router) {\n      this.fb = fb;\n      this.titleService = titleService;\n      this.url = url;\n      this.authService = authService;\n      this.router = router;\n      this.isReadonly = true;\n      this.readonly = true;\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.titleService.setTitle(projectName + ' | Confirm Password');\n        this.initForm();\n        const emailData = this.url.snapshot.queryParams.Email;\n        console.log('---');\n        console.log(emailData);\n        const decodeodEmailToken = jwt_decode(emailData);\n        const email = Object.values(decodeodEmailToken);\n        this.temp = email[0];\n        console.log('---');\n      });\n    }\n\n    initForm() {\n      this.confirmPasswordForm = this.fb.group({\n        // email: [\n        //   '',\n        //   Validators.compose([\n        //     Validators.required,\n        //     Validators.email,\n        //     Validators.pattern(RegexEnum.email),\n        //     Validators.minLength(3),\n        //     Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n        //   ]),\n        // ],\n        password: ['', Validators.compose([Validators.required, // Validators.minLength(3),\n        // Validators.maxLength(100),\n        Validators.pattern(RegexEnum.passwordValidation)])],\n        confirmPassword: ['', Validators.compose([Validators.required, // Validators.minLength(3),\n        // Validators.maxLength(100),\n        Validators.pattern(RegexEnum.passwordValidation)])]\n      }, {\n        validator: confirmPassword.MatchPassword\n      });\n    }\n\n    submit() {\n      this.hasError = false;\n      const controls = this.confirmPasswordForm.controls;\n\n      if (this.confirmPasswordForm.invalid) {\n        Object.keys(controls).forEach(controlName => controls[controlName].markAsTouched());\n        return;\n      }\n\n      this.authService.updatePasswordByEmail(this.temp, this.confirmPasswordForm.value).subscribe(res => {\n        this.router.navigate(['/auth/login']);\n      });\n    }\n\n    isControlHasError(controlName, validationType) {\n      const control = this.confirmPasswordForm.controls[controlName];\n\n      if (!control) {\n        return false;\n      }\n\n      const result = control.hasError(validationType) && (control.dirty || control.touched);\n      return result;\n    }\n\n  }\n\n  ConfirmPasswordComponent.ɵfac = function ConfirmPasswordComponent_Factory(t) {\n    return new (t || ConfirmPasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Title), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  ConfirmPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfirmPasswordComponent,\n    selectors: [[\"app-confirm-password\"]],\n    decls: 31,\n    vars: 21,\n    consts: [[1, \"wrapper\"], [1, \"d-lg-flex\", \"half\"], [1, \"bg\", \"order-1\", \"order-md-2\", \"w-halfvw\", 2, \"background-image\", \"url('assets/media/logos/login-bg.png')\"], [1, \"contents\", \"order-2\", \"order-md-2\", \"w-halfvw\"], [1, \"container\"], [1, \"row\", \"align-items-center\", \"justify-content-center\", 2, \"flex-direction\", \"column\"], [1, \"heading\", \"d-flex\", \"align-items-center\", \"justify-content-center\"], [1, \"col-md-7\", \"m-3\"], [\"novalidate\", \"novalidate\", \"id\", \"kt_confirm_password_form\", 1, \"mt-5\", \"p-10\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"first\"], [\"type\", \"text\", \"type\", \"email\", \"name\", \"email\", \"autocomplete\", \"off\", 1, \"form-control\", 3, \"value\", \"readOnly\", \"placeholder\"], [1, \"form-group\", \"last\"], [1, \"form-group\", \"last\", \"mb-3\"], [\"type\", \"password\", \"name\", \"password\", \"autocomplete\", \"off\", \"formControlName\", \"password\", \"id\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [4, \"ngIf\"], [\"type\", \"password\", \"name\", \"confirmPassword\", \"autocomplete\", \"off\", \"formControlName\", \"confirmPassword\", \"id\", \"confirmPassword\", 1, \"form-control\", 3, \"placeholder\"], [1, \"text-center\"], [\"type\", \"submit\", \"id\", \"kt_confirm_password_submit\", 1, \"btn\", \"btn-success\", \"bg\", 3, \"disabled\"]],\n    template: function ConfirmPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelementStart(7, \"span\");\n        i0.ɵɵtext(8, \"Set Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"form\", 8);\n        i0.ɵɵlistener(\"ngSubmit\", function ConfirmPasswordComponent_Template_form_ngSubmit_10_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵelement(12, \"input\", 10);\n        i0.ɵɵpipe(13, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 11);\n        i0.ɵɵelementStart(15, \"div\", 12);\n        i0.ɵɵelement(16, \"input\", 13);\n        i0.ɵɵpipe(17, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, ConfirmPasswordComponent_mat_error_18_Template, 3, 3, \"mat-error\", 14);\n        i0.ɵɵtemplate(19, ConfirmPasswordComponent_mat_error_19_Template, 3, 3, \"mat-error\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 12);\n        i0.ɵɵelementStart(21, \"div\", 12);\n        i0.ɵɵelement(22, \"input\", 15);\n        i0.ɵɵpipe(23, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, ConfirmPasswordComponent_mat_error_24_Template, 3, 3, \"mat-error\", 14);\n        i0.ɵɵtemplate(25, ConfirmPasswordComponent_mat_error_25_Template, 3, 3, \"mat-error\", 14);\n        i0.ɵɵtemplate(26, ConfirmPasswordComponent_mat_error_26_Template, 3, 3, \"mat-error\", 14);\n        i0.ɵɵelementStart(27, \"div\", 16);\n        i0.ɵɵelementStart(28, \"button\", 17);\n        i0.ɵɵtext(29);\n        i0.ɵɵpipe(30, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"formGroup\", ctx.confirmPasswordForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.temp);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(13, 13, \"AUTH.INPUT.EMAIL\"));\n        i0.ɵɵproperty(\"readOnly\", ctx.readonly);\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(17, 15, \"AUTH.INPUT.PASSWORD\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isControlHasError(\"password\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isControlHasError(\"password\", \"pattern\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(23, 17, \"AUTH.INPUT.CONFIRM_PASSWORD\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isControlHasError(\"confirmPassword\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isControlHasError(\"confirmPassword\", \"pattern\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.confirmPasswordForm.controls[\"confirmPassword\"].errors && ctx.confirmPasswordForm.controls[\"confirmPassword\"].errors.ConfirmPassword);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.confirmPasswordForm.invalid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 19, \"AUTH.GENERAL.SET_PASSWORD\"), \" \");\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i5.NgIf, i6.MatError],\n    pipes: [i7.TranslatePipe],\n    styles: [\".password-input[_ngcontent-%COMP%]{position:relative}.password-input[_ngcontent-%COMP%]   .eye-icon[_ngcontent-%COMP%]{position:absolute;right:11px;top:16px;cursor:pointer;color:#b5b5c3}.text-white[_ngcontent-%COMP%]{color:#fff!important}re-captcha.is-invalid[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{border:1px solid #dc3545!important;border-radius:.2rem}body[_ngcontent-%COMP%]{font-family:Montserrat,sans-serif;font-weight:400;font-size:14px}.content[_ngcontent-%COMP%]{padding:7rem 0}.contents[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-bottom:50px}.w-halfvw[_ngcontent-%COMP%]{width:50vw}.half[_ngcontent-%COMP%], .half[_ngcontent-%COMP%]   .container[_ngcontent-%COMP%] > .row[_ngcontent-%COMP%]{height:100vh}@media (max-width: 991.98px){.half[_ngcontent-%COMP%]   .bg[_ngcontent-%COMP%]{height:none;width:100%;max-width:500px;margin:0 auto}}.half[_ngcontent-%COMP%]   .contents[_ngcontent-%COMP%]{background:#fff}.half[_ngcontent-%COMP%]   .contents[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%]{margin-bottom:5em}.half[_ngcontent-%COMP%]   .contents[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:40px;font-weight:700;background-color:#25507c;background-clip:text;-webkit-background-clip:text;-webkit-text-fill-color:transparent}@media (max-width: 1199.98px){.half[_ngcontent-%COMP%]   .contents[_ngcontent-%COMP%], .half[_ngcontent-%COMP%]   .bg[_ngcontent-%COMP%]{width:100%}}.half[_ngcontent-%COMP%]   .contents[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%], .half[_ngcontent-%COMP%]   .bg[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]{border:none;height:54px;padding-left:0;border-bottom:1px solid #e9e9f0;border-radius:0}.half[_ngcontent-%COMP%]   .contents[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]:active, .half[_ngcontent-%COMP%]   .contents[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]:focus, .half[_ngcontent-%COMP%]   .bg[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]:active, .half[_ngcontent-%COMP%]   .bg[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]:focus{outline:none;border-bottom:1px solid #002559}.form-control[_ngcontent-%COMP%]{position:relative}.half[_ngcontent-%COMP%]   .bg[_ngcontent-%COMP%]{background-size:cover;background-position:center}.half[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#43425d;text-decoration:none;font-weight:500}.half[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{color:#002559;text-decoration:none;text-decoration:underline}.half[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{height:50px;padding-left:70px;padding-right:70px;background:#002559;border:0;border-radius:4px;margin-top:30px}.half[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:hover{background:#0b3957}.half[_ngcontent-%COMP%]   .forgot-pass[_ngcontent-%COMP%]{position:relative;top:2px;font-size:14px;font-weight:500}.caption[_ngcontent-%COMP%]{font-weight:500}.bg[_ngcontent-%COMP%]{background-color:#002559!important}.p[_ngcontent-%COMP%]{position:absolute;top:145px;right:55px}\"]\n  });\n  return ConfirmPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}