{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { API_ROUTES, validationLength } from 'src/app/constant/constant';\nimport { AssignProjectModel } from '../model/assign-project.model';\nimport { MatAccordion } from '@angular/material/expansion';\nimport * as bcrypt from 'bcryptjs';\nlet AssignProjectAddEditComponent = class AssignProjectAddEditComponent {\n  constructor(translateService, router, route, titleService, fb, commonService, toastr, cdr) {\n    this.translateService = translateService;\n    this.router = router;\n    this.route = route;\n    this.titleService = titleService;\n    this.fb = fb;\n    this.commonService = commonService;\n    this.toastr = toastr;\n    this.cdr = cdr;\n    this.activeIdString = 1;\n    this.languageList = [];\n    this.roleListModel = new AssignProjectModel();\n    this.translations = [];\n    this.statusArr = [{\n      value: this.translateService.instant('PAGES.COMMON.ACTIVE'),\n      key: 1\n    }, {\n      value: this.translateService.instant('PAGES.COMMON.INACTIVE'),\n      key: 0\n    }];\n    this.selectedPermission = [];\n    this.rolePermissions = [];\n    this.selectAllPortalModule = [];\n    this.selectAllModule = [];\n    this.moduleNameServiceRoute = API_ROUTES.ROLE;\n    this.fieldLength = validationLength;\n    this.moduleList = [];\n    this.portalListArr = [];\n    this.rightsList = [];\n    this.selectedModule = [];\n    this.allPermissionArr = [];\n    this.allModuleArr = {};\n    this.isAllSelectList = [];\n    this.gridOption = {\n      allrecords: true,\n      page: 1,\n      pagesize: 10,\n      sortDir: 'asc',\n      sortField: 'name',\n      locale: 'en',\n      filters: {}\n    };\n    this.initForm(), this.milestoneInitForm();\n  }\n\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.getStatus();\n      this.getProjectType();\n      this.getProjectManager();\n      this.getProjectLead();\n      this.getProjectTeamMember();\n      this.getTimeZone();\n      this.getProjectStatusFrequency();\n      this.getDayOfMonth();\n      this.getProjectCallFrequency();\n      this.getMilestonePercentage();\n      this.getResourceCategory();\n      this.getResourceName();\n      this.getResourceBand();\n      this.getAllMilestoneData();\n      const hashId = this.route.snapshot.queryParams['id'];\n      const id = localStorage.getItem('id');\n      const roleId = yield bcrypt.compare(id, hashId);\n\n      if (roleId == true) {\n        this.roleId = id;\n        this.getModuleList();\n        this.getPortalList();\n\n        if (this.roleId) {\n          this.titleService.setTitle(this.translateService.instant('PAGES.CLIENT.EDIT_TITLE'));\n          this.getDetail();\n        } else {\n          this.titleService.setTitle(this.translateService.instant('PAGES.CLIENT.ADD_TITLE'));\n        }\n      }\n    });\n  }\n\n  getStatus() {\n    this.commonService.getAllStatus().subscribe(response => {\n      this.Status = response.result; // console.log(this.Status, \"this.Status\");\n    });\n  }\n\n  getProjectType() {\n    this.commonService.getAllProjectType().subscribe(response => {\n      this.Type = response.result; // console.log(this.Type, \"this.Type\");\n    });\n  }\n\n  getProjectManager() {\n    this.commonService.getAllProjectManager().subscribe(response => {\n      this.Manager = response.result; // console.log(this.Manager, \"this.Manager\");\n    });\n  }\n\n  getProjectLead() {\n    this.commonService.getAllProjectLead().subscribe(response => {\n      this.Lead = response.result; // console.log(this.Lead, \"this.Lead\");\n    });\n  }\n\n  getProjectTeamMember() {\n    this.commonService.getAllProjectTeamMember().subscribe(response => {\n      this.Member = response.result; // console.log(this.Member, \"this.Member\");\n    });\n  }\n\n  getTimeZone() {\n    this.commonService.getAllTimeZone().subscribe(response => {\n      this.Time = response.result; // console.log(this.Time, \"this.Time\");\n    });\n  }\n\n  getProjectStatusFrequency() {\n    this.commonService.getAllProjectStatusFrequency().subscribe(response => {\n      this.StatusFrequency = response.result; // console.log(this.StatusFrequency, \"this.StatusFrequency\");\n    });\n  }\n\n  getDayOfMonth() {\n    this.commonService.getAllDayOfMonth().subscribe(response => {\n      this.DayOfMonth = response.result; // console.log(this.DayOfMonth, \"this.DayOfMonth\");\n    });\n  }\n\n  getProjectCallFrequency() {\n    this.commonService.getAllProjectCallFrequency().subscribe(response => {\n      this.CallFrequency = response.result; // console.log(this.CallFrequency, \"this.CallFrequency\");\n    });\n  }\n\n  getMilestonePercentage() {\n    this.commonService.getAllMilestonePercentage().subscribe(response => {\n      this.Percentage = response.result; // console.log(this.Percentage, \"this.Percentage\");\n    });\n  }\n\n  getResourceCategory() {\n    this.commonService.getAllResourceCategory().subscribe(response => {\n      this.ResourceCategory = response.result; // console.log(this.ResourceCategory, \"this.Category\");\n    });\n  }\n\n  getResourceName() {\n    this.commonService.getAllResourceName().subscribe(response => {\n      this.ResourceName = response.result; // console.log(this.ResourceName, \"this.Name\");\n    });\n  }\n\n  getResourceBand() {\n    this.commonService.getAllResourceBand().subscribe(response => {\n      this.ResourceBand = response.result; // console.log(this.ResourceBand, \"this.Band\");\n    });\n  }\n\n  getAllMilestoneData() {\n    this.commonService.getAllMilestoneData().subscribe(response => {\n      this.MilestoneData = response.result; // console.log(this.MilestoneData, \"this.Band\");\n    });\n  }\n\n  myButton() {} // convenience getter for easy access to form fields\n\n\n  get f() {\n    return this.roleForm.controls;\n  }\n\n  get g() {\n    return this.milestoneForm.controls;\n  }\n  /**\r\n   * Form Init\r\n   */\n\n\n  initForm() {\n    this.roleForm = this.fb.group({\n      Name: ['', Validators.compose([Validators.required])],\n      ProjectStatusId: ['', Validators.compose([Validators.required])],\n      ProjectTypeId: ['', Validators.compose([Validators.required])],\n      ProjectManagerId: ['', Validators.compose([Validators.required])],\n      ProjectLeadId: ['', Validators.compose([Validators.required])],\n      ProjectTeamMember: ['', Validators.compose([Validators.required])],\n      AllowInProductiveApp: ['', Validators.compose([Validators.required])],\n      TimeZoneId: ['', Validators.compose([Validators.required])],\n      IMSDateFormat: ['', Validators.compose([Validators.required])],\n      IsProjectStatusEnable: ['', Validators.compose([Validators.required])],\n      ProjectStatusFrequencyId: ['', Validators.compose([Validators.required])],\n      DayOfMonthId: ['', Validators.compose([Validators.required])],\n      StarDateOfRecurrenceStatusReport: ['', Validators.compose([Validators.required])],\n      IsProjectReviewCallEnable: ['', Validators.compose([Validators.required])],\n      ProjectReviewCallFrequencyId: ['', Validators.compose([Validators.required])],\n      ReviewCallDayOfMonthId: ['', Validators.compose([Validators.required])],\n      ReviewCallStarDateOfRecurrenceStatusReport: ['', Validators.compose([Validators.required])],\n      IsCMMIProcess: ['', Validators.compose([Validators.required])],\n      // MileStoneName: ['', Validators.compose([\n      // Validators.required])],\n      // MileStonePercentageId: ['', Validators.compose([\n      // Validators.required])],\n      // DueDate: ['', Validators.compose([\n      // Validators.required])],\n      ResourceCategoryId: ['', Validators.compose([Validators.required])],\n      ResourceName: ['', Validators.compose([Validators.required])],\n      BandId: ['', Validators.compose([Validators.required])],\n      ResourceLevel: ['', Validators.compose([Validators.required])],\n      TotalHours: ['', Validators.compose([Validators.required])],\n      BandRate: ['', Validators.compose([Validators.required])],\n      Amount: ['', Validators.compose([Validators.required])]\n    });\n  }\n\n  milestoneInitForm() {\n    this.milestoneForm = this.fb.group({\n      MileStoneName: ['', Validators.compose([Validators.required])],\n      MileStonePercentageId: ['', Validators.compose([Validators.required])],\n      DueDate: ['', Validators.compose([Validators.required])]\n    });\n  }\n\n  isControlHasError(controlName, validationType) {\n    const control = this.roleForm.controls[controlName];\n\n    if (!control) {\n      return false;\n    }\n\n    const result = control.hasError(validationType) && (control.dirty || control.touched);\n    return result;\n  }\n\n  isControlMilestoneErrors(controlName, validationType) {\n    const control = this.milestoneForm.controls[controlName];\n\n    if (!control) {\n      return false;\n    }\n\n    const result = control.hasError(validationType) && (control.dirty || control.touched);\n    return result;\n  }\n  /** Get Detail by id */\n\n\n  getDetail() {\n    this.commonService.getOne(this.roleId, this.moduleNameServiceRoute).subscribe(response => {\n      this.roleListModel = response.result;\n\n      if (this.roleListModel.rights) {\n        this.selectedModule = JSON.parse(this.roleListModel.rights);\n      } // this.selectedPermission = this.roleListModel.permission ? this.roleListModel.permission.split(',') : [];\n\n\n      this.roleForm.patchValue(this.roleListModel);\n      this.cdr.detectChanges();\n    });\n  }\n  /**save assign page data */\n\n\n  save() {\n    console.log(\"save\");\n    this.isSubmitted = true;\n    const controls = this.roleForm.controls; // check form\n\n    if (this.roleForm.invalid) {\n      Object.keys(controls).forEach(controlName => controls[controlName].markAsTouched());\n      this.isSubmitted = false;\n      return;\n    }\n\n    Object.keys(this.selectedPermission).forEach(element => {}); // this.roleForm.value.rights = JSON.stringify(this.selectedModule);\n\n    this.commonService.createAssign(this.roleForm.value).subscribe(res => {\n      this.isSubmitted = false;\n\n      if (res.status) {\n        this.router.navigate(['role']).then(() => {\n          this.toastr.success(res.message, 'Success!');\n        });\n      } else {\n        if (res.message) {\n          this.toastr.error(res.message, 'Error!');\n        }\n      }\n    }, err => {\n      this.isSubmitted = false;\n    });\n  }\n  /**saveMilestone data only add/update milestone component */\n\n\n  saveMilestone() {\n    this.isSubmitted = true;\n    const controls = this.milestoneForm.controls; // check form\n\n    if (this.milestoneForm.invalid) {\n      Object.keys(controls).forEach(controlName => controls[controlName].markAsTouched());\n      this.isSubmitted = false;\n      return;\n    }\n\n    this.commonService.createMilestone(this.milestoneForm.value).subscribe(res => {\n      this.isSubmitted = false;\n      this.getAllMilestoneData();\n      this.toastr.success(res.message, 'Success!'); // if (res.status) {\n      //   this.router.navigate(['role']).then(() => {\n      //     this.toastr.success(res.message, 'Success!');\n      //   });\n      // } else {\n      //   if (res.message) {\n      //     this.toastr.error(res.message, 'Error!');\n      //   }\n      // }\n    }, err => {\n      this.isSubmitted = false;\n    });\n  }\n\n  getModuleList() {\n    this.commonService.searchAll('module', this.gridOption).subscribe(response => {\n      this.moduleList = response.result.items;\n      this.getRightsList();\n    });\n  }\n\n  getRightsList() {\n    this.commonService.searchAll('rights', this.gridOption).subscribe(response => {\n      this.rightsList = response.result.items;\n\n      for (let p = 0; p < this.portalList.length; p++) {\n        this.portalList[p].modulePermission = [];\n\n        for (let i = 0; i < this.moduleList.length; i++) {\n          if (this.portalList[p].id === this.moduleList[i].portal_id) {\n            this.moduleList[i].permission = [];\n            this.portalList[p].modulePermission.push(this.moduleList[i]);\n\n            for (let j = 0; j < this.rightsList.length; j++) {\n              if (this.portalList[p].modulePermission[i]) {\n                if (this.portalList[p].modulePermission[i].id === this.rightsList[j].module_id) {\n                  this.portalList[p].modulePermission[i].permission.push(this.rightsList[j]);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      for (let i = 0; i < this.moduleList.length; i++) {\n        this.moduleList[i].permission = [];\n\n        for (let j = 0; j < this.rightsList.length; j++) {\n          if (this.moduleList[i].id === this.rightsList[j].module_id) {\n            this.moduleList[i].permission.push(this.rightsList[j]);\n          }\n        }\n      }\n\n      for (let index = 0; index < this.portalList.length; index++) {\n        if (this.portalList[index].hasOwnProperty('modulePermission')) {\n          if (this.portalList[index]['modulePermission'].length > 0) {\n            let portalId = this.portalList[index]['slug'];\n            this.selectAllPortalModule[portalId] = [];\n\n            for (let indexPermission = 0; indexPermission < this.portalList[index]['modulePermission'].length; indexPermission++) {\n              if (this.portalList[index]['modulePermission'][indexPermission].hasOwnProperty('permission')) {\n                let ModuleIdIndex = this.portalList[index]['modulePermission'][indexPermission]['slug'];\n                let ModuleRightsCount = this.portalList[index]['modulePermission'][indexPermission]['permission'].length;\n\n                if (this.allModuleArr.hasOwnProperty(portalId)) {\n                  this.allModuleArr[portalId][ModuleIdIndex] = ModuleRightsCount;\n                  this.selectAllPortalModule[portalId][ModuleIdIndex] = false;\n                } else {\n                  this.allModuleArr[portalId] = {};\n                  this.allModuleArr[portalId]['selectAll'] = false;\n                  this.selectAllPortalModule[portalId][ModuleIdIndex] = false;\n                  this.allModuleArr[portalId][ModuleIdIndex] = ModuleRightsCount;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.checkAllSelect();\n    });\n  }\n  /*\r\n  * Check all module is select or not */\n\n\n  checkAllSelect() {\n    if (this.selectedModule.length > 0) {\n      Object.keys(this.selectedModule[0]).forEach(portalKey => {\n        this.checkModuleRoles(portalKey);\n      });\n    }\n\n    return true;\n  }\n  /*\r\n  * Check all module selectAll portal permission */\n\n\n  checkModuleRoles(portalKey) {\n    Object.keys(this.selectAllPortalModule[portalKey]).forEach(rightsKey => {\n      this.checkLengthOfPermission(portalKey, rightsKey);\n    });\n    this.checkSelectAll();\n  }\n  /*\r\n  * used to check the select all for module (check if module's select all checked or not') */\n\n\n  checkLengthOfPermission(portalKey, rightsKey) {\n    let length = this.allModuleArr[portalKey][rightsKey];\n    let rightsKeyLength = 0;\n\n    if (this.selectedModule[0][portalKey].hasOwnProperty(rightsKey)) {\n      rightsKeyLength = this.selectedModule[0][portalKey][rightsKey].length;\n    }\n\n    if (length == rightsKeyLength) {\n      this.selectAllPortalModule[portalKey][rightsKey] = true;\n    } else {\n      this.selectAllPortalModule[portalKey][rightsKey] = false;\n    }\n  }\n  /*\r\n  * In this we will check all portal's foreach*/\n\n\n  checkSelectAll() {\n    let keys = Object.keys(this.selectAllPortalModule);\n\n    for (let i = 0; i < keys.length; i++) {\n      let id = keys[i];\n      this.checkSelectAllPermission(id);\n    }\n  }\n  /*\r\n  * In this we will check permission is selcted or not in the portal module array*/\n\n\n  checkSelectAllPermission(id) {\n    let value = Object.values(this.selectAllPortalModule[id]);\n    value.indexOf(false) !== -1 ? this.allModuleArr[id]['selectAll'] = false : this.allModuleArr[id]['selectAll'] = true;\n  }\n  /*\r\n  * used to get the portal list form DB*/\n\n\n  getPortalList() {\n    this.commonService.searchAll('portals', this.gridOption).subscribe(response => {\n      this.portalList = response.result.items;\n    });\n  }\n  /**milestone one rwo delete */\n\n\n  delete(Id) {\n    this.commonService.deleteMilestoneUser(Id).subscribe({\n      next: response => {\n        this.MilestoneData = response.result;\n        alert(\"Data sucessfully deleted\");\n        this.toastr.success(\"Data sucessfully Deleted\");\n      },\n      error: error => {\n        this.toastr.error('Error in API');\n      }\n    });\n  }\n  /** Get Detail by id */\n\n\n  edit(id) {\n    this.commonService.getOneData(id).subscribe(response => {\n      this.MilestoneData = response.result;\n\n      if (this.MilestoneData.rights) {\n        this.selectedModule = JSON.parse(this.MilestoneData.rights);\n      }\n\n      this.milestoneForm.patchValue(this.MilestoneData); // this.milestoneForm.patchValue(this.MilestoneData.MileStonePercentageId);\n\n      this.cdr.detectChanges();\n    });\n  }\n\n};\n\n__decorate([ViewChild(MatAccordion)], AssignProjectAddEditComponent.prototype, \"accordion\", void 0);\n\nAssignProjectAddEditComponent = __decorate([Component({\n  selector: 'app-assign-project-add-edit',\n  templateUrl: './assign-project-add-edit.component.html',\n  styleUrls: ['./assign-project-add-edit.component.scss']\n})], AssignProjectAddEditComponent);\nexport { AssignProjectAddEditComponent };","map":null,"metadata":{},"sourceType":"module"}