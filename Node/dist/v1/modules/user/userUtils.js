"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserUtils = void 0;
const Sql = require("jm-ez-mysql");
const tables_1 = require("../../../config/tables");
const responseBuilder_1 = require("../../../helpers/responseBuilder");
const utils_1 = require("../../../helpers/utils");
const jwt_1 = require("../../../helpers/jwt");
const jwt = require("jsonwebtoken");
const csvParser = require("csv-parser");
const fs = require("fs");
const My = require("jm-ez-mysql");
const sendEmail_1 = require("../../../helpers/sendEmail");
const constants_1 = require("../../../config/constants");
// import * as excelToJson from "convert-excel-to-json";
const excelToJson = require('convert-excel-to-json');
const bcrypt = require('bcryptjs');
const saltRounds = 10;
class UserUtils {
    /**
     * Create user query
     */
    getportal(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield My.first(tables_1.Tables.PORTAL, ["*"], "url = ?", [url]);
        });
    }
    createUser(userDetail) {
        return __awaiter(this, void 0, void 0, function* () {
            const newUser = yield Sql.insert(tables_1.Tables.USERS, userDetail);
            const User = yield Sql.query("UPDATE " + tables_1.Tables.USERS + " SET email = AES_ENCRYPT('" + userDetail.email + "', '" + process.env.SECRET_KEY + "'), phone = AES_ENCRYPT('" + userDetail.phone + "', '" + process.env.SECRET_KEY + "') WHERE id = ?", [newUser.insertId]);
            // Update query as we don't know what all fields will the userDetail array might have inside 
            return responseBuilder_1.ResponseBuilder.data({ id: newUser.insertId });
        });
    }
    /**
     * get User by email
     */
    getUserByEmail(email) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield Sql.query("SELECT u.id, u.first_name,u.thumbnail_photo_base64,u.reporting_manager_name,u.designation,u.department,u.team,u.practice, u.last_name, u.password, u.email, u.profile_image,AES_DECRYPT(u.phone, '" + process.env.SECRET_KEY + "') as phone, u.isVerified, u.role_id, u.role_permission, u.user_permission, CONCAT('[{', GROUP_CONCAT(DISTINCT REPLACE(REPLACE(roles.rights, '[{', ''), '}]', '')), '}]') AS permissions, AES_DECRYPT(u.otp, '" + process.env.SECRET_KEY + "') as otp, u.otp_sent_time, u.status, u.otp_count FROM " + tables_1.Tables.USERS + " as u LEFT JOIN roles ON FIND_IN_SET(roles.id, u.role_id) WHERE u.email LIKE ? GROUP BY u.id limit 1", [email]);
            console.log(user);
            return responseBuilder_1.ResponseBuilder.data(user);
        });
    }
    getUserByName(fName, lName) {
        return __awaiter(this, void 0, void 0, function* () {
            const email = yield Sql.query("SELECT email FROM " + tables_1.Tables.USERS + " WHERE first_name LIKE ? AND last_name LIKE ?", [fName, lName]);
            console.log(email);
            return responseBuilder_1.ResponseBuilder.data(email);
        });
    }
    getUserAllDetails(email) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield Sql.query("SELECT * FROM " + tables_1.Tables.USERS + " WHERE email LIKE ?", [email]);
            return responseBuilder_1.ResponseBuilder.data(user);
        });
    }
    /**
     * Update device token generated by authorization
     */
    updateDeviceToken(deviceToken, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield Sql.update(tables_1.Tables.USERS, { deviceToken }, "id = ?", [userId]);
            }
            catch (err) {
                throw responseBuilder_1.ResponseBuilder.error(err);
            }
        });
    }
    /**
     * Update deviceId generated by authorization
     */
    updateDeviceID(deviceId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield Sql.update(tables_1.Tables.USERS, { deviceId }, "id = ?", [userId]);
            }
            catch (err) {
                throw responseBuilder_1.ResponseBuilder.error(err);
            }
        });
    }
    /**
     * Update role data
     */
    updateRoleData(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const updatedUser = yield Sql.update(tables_1.Tables.USERS, { "role_name": data.name, "role_permission": data.rights }, `role_id = ?`, [id]);
                return updatedUser;
            }
            catch (err) {
                throw responseBuilder_1.ResponseBuilder.error(err);
            }
        });
    }
    /**
     * Update password
     */
    updatePassword(password, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield Sql.update(tables_1.Tables.USERS, { password: password, updated_by: userId }, "id = ?", [userId]);
            return responseBuilder_1.ResponseBuilder.data({ data: data });
        });
    }
    /**
     * Update password by using email
     */
    updatePasswordByEmail(password, email) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield Sql.update(tables_1.Tables.USERS, { password: password, updated_by: email }, "email = ?", [email]);
            console.log(user);
            return responseBuilder_1.ResponseBuilder.data({ data: user });
        });
    }
    /**
     * verify the user after sign up
     */
    verify(req) {
        return __awaiter(this, void 0, void 0, function* () {
            // comapre url and email hash
            const userDetail = yield Sql.first(tables_1.Tables.USERS, ["id"], "emailHash = ?", [
                req.query.id,
            ]);
            if (userDetail) {
                const updateRes = yield Sql.update(`${tables_1.Tables.USERS}`, { isVerified: 1 }, "emailHash = ?", [
                    req.query.id,
                ]);
                if (updateRes !== null || updateRes !== undefined) {
                    return responseBuilder_1.ResponseBuilder.data(userDetail);
                }
                else {
                    return responseBuilder_1.ResponseBuilder.data({});
                }
            }
            else {
                return responseBuilder_1.ResponseBuilder.data({});
            }
        });
    }
    /**
     * Reset Password
     */
    resetPassword(req) {
        return __awaiter(this, void 0, void 0, function* () {
            const tokenData = yield jwt_1.Jwt.decodeAuthToken(req.token);
            if (tokenData) {
                req.id = yield Number(tokenData === null || tokenData === void 0 ? void 0 : tokenData.userId);
            }
            const users = yield Sql.query(`SELECT * FROM ${tables_1.Tables.USERS} WHERE status != 2 AND id = ${req.id}`);
            const isMatch = yield utils_1.Utils.compareEncryptedText(req.newPassword, users[0].password);
            if (isMatch) {
                return responseBuilder_1.ResponseBuilder.errorMessage(req.t("OLD_PASSWORD_WRONG_RESET"));
            }
            else if (req.newPassword && req.token) {
                const hash = yield utils_1.Utils.encryptText(req.newPassword);
                req.newPassword = hash;
                if (tokenData) {
                    req.updated_at = new Date();
                    const id = req.id;
                    const data = yield Sql.update(`${tables_1.Tables.USERS}`, { password: hash, updated_at: req.updated_at, updated_by: id }, "id= ?", [
                        id,
                    ]);
                    return responseBuilder_1.ResponseBuilder.data(data);
                }
                else {
                    return responseBuilder_1.ResponseBuilder.errorMessage(req.t("TOKEN_INVALID"));
                }
            }
        });
    }
    /**
     * Get all users
     */
    usercount() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Sql.query("SELECT " +
                "(SELECT COUNT(Id) FROM " + tables_1.Tables.USERS + ") AS User," +
                "(SELECT COUNT(Id) FROM " + tables_1.Tables.PORTAL + ") AS Portal," +
                "(SELECT COUNT(Id) FROM " + tables_1.Tables.MODULES + ") AS Module," +
                "(SELECT COUNT(Id) FROM " + tables_1.Tables.RIGHTS + ") AS Rights," +
                "(SELECT COUNT(Id) FROM " + tables_1.Tables.ROLES + ") AS Roles," +
                "(SELECT COUNT(Id) FROM " + tables_1.Tables.MENUS + ") AS Menu");
        });
    }
    getAll(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            //search
            let filters = '';
            if (req.filters) {
                if (req.filters.search) {
                    filters += ` AND (${tables_1.Tables.USERS}.first_name LIKE '%${req.filters.search}%' OR AES_DECRYPT(${tables_1.Tables.USERS}.email, '${process.env.SECRET_KEY}') LIKE '%${req.filters.search}%' OR AES_DECRYPT(${tables_1.Tables.USERS}.phone, '${process.env.SECRET_KEY}') LIKE '%${req.filters.search}%' ) `;
                }
                if (req.filters.hasOwnProperty('status')) {
                    filters += ` AND ${tables_1.Tables.USERS}.status = ${req.filters.status}`;
                }
                if (req.filters.hasOwnProperty('role_id')) {
                    filters += ` AND ${tables_1.Tables.USERS}.role_id IN (${req.filters.role_id})`;
                }
            }
            //pagination
            let offset;
            if (req.limit && req.page) {
                offset = (req.page - 1) * req.limit;
            }
            //sorting
            let orderBy = ` ORDER BY ${tables_1.Tables.USERS}.id DESC`;
            if (req.sortDir && req.sortField) {
                if (req.sortField == 'email') {
                    orderBy = ` ORDER BY ${tables_1.Tables.USERS}.${req.sortField} ${req.sortDir}`;
                }
                else if (req.sortField == 'phone') {
                    orderBy = ` ORDER BY ${tables_1.Tables.USERS}.${req.sortField} ${req.sortDir}`;
                }
                else if (req.sortField == 'role_name') {
                    orderBy = ` ORDER BY ${tables_1.Tables.ROLES}.${req.sortField} ${req.sortDir}`;
                }
                else {
                    orderBy = ` ORDER BY ${tables_1.Tables.USERS}.${req.sortField} ${req.sortDir}`;
                }
            }
            //query
            // let query = `SELECT u.* from ${Tables.USERS} as u WHERE u.status != 2  `;
            let query = "SELECT " +
                tables_1.Tables.USERS + ".*, GROUP_CONCAT(DISTINCT " + tables_1.Tables.ROLES + ".name ORDER BY " + tables_1.Tables.ROLES + ".id) AS role_name,AES_DECRYPT(" + tables_1.Tables.USERS + ".email, '" + process.env.SECRET_KEY + "') AS email_new, AES_DECRYPT(" + tables_1.Tables.USERS + ".phone, '" + process.env.SECRET_KEY + "') AS phone_new, AES_DECRYPT(" + tables_1.Tables.USERS + ".otp, '" + process.env.SECRET_KEY + "') AS otp_new FROM " + tables_1.Tables.USERS + " LEFT JOIN " + tables_1.Tables.ROLES + " ON FIND_IN_SET(" + tables_1.Tables.ROLES + ".id, " + tables_1.Tables.USERS + ".role_id) > 0 WHERE " + tables_1.Tables.USERS + ".status != 2 ";
            if (filters != '') {
                query += filters;
            }
            query += ` GROUP BY ${tables_1.Tables.USERS}.id `;
            query += orderBy;
            let newFilter = '';
            if (req.filters.hasOwnProperty('role')) {
                const MyRoleFilter = req.filters.role;
                MyRoleFilter.forEach((element, index) => {
                    if (index == 0) {
                        newFilter += `AND res.role_name LIKE '%${element}%' `;
                    }
                    else {
                        newFilter += `OR res.role_name LIKE '%${element}%' `;
                    }
                });
            }
            let newQuery = `SELECT * FROM ( ` + query + ` ) AS res WHERE 1 = 1 ${newFilter} `;
            let totalItems = yield Sql.query(newQuery);
            if (req.limit && req.page) {
                newQuery += ` LIMIT ` + req.limit + ` OFFSET ` + offset;
                let result = yield Sql.query(newQuery);
                response = {
                    "totalItems": totalItems.length,
                    "items": result
                };
            }
            else {
                response = {
                    "totalItems": totalItems.length,
                    "items": totalItems
                };
            }
            return response;
        });
    }
    /**
     * Get single record
     */
    getOne(id) {
        return __awaiter(this, void 0, void 0, function* () {
            // return await Sql.query("SELECT *, AES_DECRYPT(email, '" + process.env.SECRET_KEY + "') as email_new, AES_DECRYPT(phone, '" + process.env.SECRET_KEY + "') as phone_new, AES_DECRYPT(otp, '" + process.env.SECRET_KEY + "') as otp_new FROM " + Tables.USERS + " WHERE status != 2 AND id = ? ", [Number(id)]);
            return yield Sql.query("SELECT u.*, u.email, CONCAT('[{', GROUP_CONCAT(DISTINCT REPLACE(REPLACE(roles.rights, '[{', ''), '}]', '')), '}]') AS permissions, u.otp FROM " + tables_1.Tables.USERS + " as u LEFT JOIN roles ON FIND_IN_SET(roles.id, u.role_id) WHERE u.status != 2 AND u.id = ? GROUP BY u.id", [Number(id)]);
        });
    }
    /**
     * Update Record
     */
    update(input, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const role = yield Sql.updateFirst(tables_1.Tables.USERS, input, `id = ?`, [id]);
            const User = yield Sql.query("UPDATE " + tables_1.Tables.USERS + " SET phone = '" + input.phone + "', email ='" + input.email + "' WHERE id = ?", [id]);
            return role.affectedRows > 0 ? true : false;
        });
    }
    /**
     * Single Delete
     */
    delete(id, user_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const advantages = yield Sql.updateFirst(tables_1.Tables.USERS, { status: 2, deleted_by: user_id }, `id = ?`, [id]);
            return advantages.affectedRows > 0 ? true : false;
        });
    }
    /**
     * Toggle Status
     */
    toggleStatus(ids, status, user_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const advantages = yield Sql.query(`UPDATE ${tables_1.Tables.USERS} SET status = ${status}, updated_by = ${user_id} WHERE id IN (${ids})`);
            return advantages.affectedRows > 0 ? true : false;
        });
    }
    /**
     * Multiple Delete
     */
    deleteMany(ids, user_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const advantages = yield Sql.query(`UPDATE ${tables_1.Tables.USERS} SET status = 2, deleted_by = ${user_id} WHERE id IN (${ids})`);
            return advantages.affectedRows > 0 ? true : false;
        });
    }
    /**
     * Generate Authorization token
     */
    generateAuthToken(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const userDetail = {
                email: input.email
            };
            const user = yield Sql.query("SELECT * FROM " + tables_1.Tables.USERS + " WHERE AES_DECRYPT(email, '" + process.env.SECRET_KEY + "') LIKE ?", input.email);
            console.log(user);
            if (!user[0].auth_token) {
                userDetail['token'] = jwt.sign(userDetail, process.env.JWT_SECRET);
                const obj = {
                    auth_token: userDetail['token']
                };
                const updatedUser = yield Sql.update(tables_1.Tables.USERS, obj, " AES_DECRYPT('" + userDetail.email + "', '" + process.env.SECRET_KEY + "') LIKE ?", [input.email]);
            }
            else {
                userDetail['token'] = user[0].auth_token;
            }
            return userDetail;
        });
    }
    /**
     * Import users from file
     */
    bulkImport(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            if (req.files) {
                const file = req.files;
                let role = [];
                let query = yield `SELECT * from ${tables_1.Tables.ROLES} WHERE status != 2 `;
                role = yield My.query(query);
                const imageUploade = yield utils_1.Utils.upload(req.files);
                const fileName = imageUploade.filename.substring(imageUploade.filename.lastIndexOf(".") + 1, imageUploade.filename.length);
                if (fileName == "csv") {
                    this.bulkInsertUsingCsv(req, res, imageUploade.path, role);
                }
                else {
                    const result = excelToJson({ sourceFile: imageUploade.path });
                    const finalArr = [];
                    const option = [];
                    if (result["Sheet1"]) {
                        const keyArray = Object.values(result["Sheet1"][0]);
                        let k = 10;
                        for (let i = 1; i < result["Sheet1"].length; i++) {
                            k--;
                            const obj = {};
                            for (let j = 0; j < keyArray.length; j++) {
                                if (keyArray[j] == "password") {
                                    // now we set user password to hashed password
                                    obj[keyArray[j]] = yield utils_1.Utils.encryptText(result["Sheet1"][i][((i + j + k).toString(36)).toUpperCase()]);
                                }
                                else if (keyArray[j] == "role_id") {
                                    let data = result["Sheet1"][i][((i + j + k).toString(36)).toUpperCase()];
                                    if (data.includes(",")) {
                                        const roles = data.split(",");
                                        let selectedRole = [];
                                        for (let i = 0; i < roles.length; i++) {
                                            let cammelVal = roles[i].charAt(0).toUpperCase() + roles[i].toLowerCase().slice(1);
                                            let roleData = role.find(val => (val.name == roles[i] || val.name == cammelVal));
                                            selectedRole.push(roleData ? roleData.id : '');
                                        }
                                        obj[keyArray[j]] = yield selectedRole.toString();
                                    }
                                    else {
                                        const cammelVal = data.charAt(0).toUpperCase() + data.toLowerCase().slice(1);
                                        let roleData = role.find(val => (val.name == data || val.name == cammelVal));
                                        obj[keyArray[j]] = roleData ? roleData.id : '';
                                    }
                                }
                                else {
                                    if (result["Sheet1"][i][((i + j + k).toString(36)).toUpperCase()]) {
                                        obj[keyArray[j]] = result["Sheet1"][i][((i + j + k).toString(36)).toUpperCase()];
                                    }
                                    else {
                                        obj[keyArray[j]] = null;
                                    }
                                }
                            }
                            finalArr.push(obj);
                        }
                        fs.unlinkSync(imageUploade.path);
                        return yield My.insertMany(tables_1.Tables.USERIMPORT, finalArr);
                    }
                    else {
                        res.status(constants_1.Constants.BAD_REQ).json(responseBuilder_1.ResponseBuilder.badRequest(req.t("FILE_ERROR")));
                    }
                }
                //}).catch((err) => {
                //  console.log(err);
                //  this.returnData(req, res, resolve, reject, err, []);
                //});
            }
            //return await Sql.insertMany(Tables.USERS, userDetail);
        });
    }
    /**
     * Bulk Insert in user_imports
     */
    bulkInsertUsingCsv(req, res, path, role) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const results = [];
            fs.createReadStream(path)
                .pipe(csvParser())
                .on("data", (data) => {
                if (data.role_id.includes(",")) {
                    const roles = data.role_id.split(",");
                    let selectedRole = [];
                    for (let i = 0; i < roles.length; i++) {
                        let cammelVal = roles[i].charAt(0).toUpperCase() + roles[i].toLowerCase().slice(1);
                        let roleData = role.find(val => (val.name == roles[i] || val.name == cammelVal));
                        selectedRole.push(roleData.id);
                    }
                    data.role_id = selectedRole.toString();
                }
                else {
                    const cammelVal = data.role_id.charAt(0).toUpperCase() + data.role_id.toLowerCase().slice(1);
                    let roleData = role.find(val => (val.name == data.role_id || val.name == cammelVal));
                    data.role_id = roleData.id;
                }
                results.push(data);
            })
                .on("end", () => __awaiter(this, void 0, void 0, function* () {
                return yield My.insertMany(tables_1.Tables.USERIMPORT, results);
            }));
        }));
    }
    /**
     * Get data from user_imports table
     * @returns
     */
    getDataFromImportTable() {
        return __awaiter(this, void 0, void 0, function* () {
            let query = "SELECT *, AES_ENCRYPT(email, '" + process.env.SECRET_KEY + "') as email_new, AES_ENCRYPT(phone, '" + process.env.SECRET_KEY + "') as phone_new from " + tables_1.Tables.USERIMPORT;
            let data = yield Sql.query(query);
            let userArr = [];
            for (let i = 0; i < data.length; i++) {
                const user = yield Sql.query("SELECT count(u.id) as count FROM " + tables_1.Tables.USERS + " AS u WHERE AES_DECRYPT(u.email, '" + process.env.SECRET_KEY + "') LIKE AES_DECRYPT('" + data[i].email.toString() + "', '" + process.env.SECRET_KEY + "') AND u.status != 2");
                if (!user[0].count) {
                    delete data[i].id;
                    data[i]['is_import'] = 1;
                    const token = jwt_1.Jwt.getAuthToken({ userId: data[i], device_token: '' });
                    const url = 'http://localhost:4200/auth/set-password/' + token;
                    const userDetails = data[i];
                    const emailData = {
                        "reset_password_link": url,
                        "username": yield utils_1.Utils.titleCase(data[i].first_name)
                    };
                    sendEmail_1.SendEmail.sendRawMail("forgot-password", emailData, [data[i].email], `Reset Password`, "");
                    data[i].email = data[i].email_new;
                    data[i].phone = data[i].phone_new;
                    delete data[i].email_new;
                    delete data[i].phone_new;
                    yield userArr.push(data[i]);
                }
            }
            yield My.insertMany(tables_1.Tables.USERS, userArr);
            yield My.delete(tables_1.Tables.USERIMPORT, "id > 0");
            return yield userArr;
        });
    }
    /**
     * Update OTP related data
     */
    updateOTP(input, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const otp = yield Sql.update(tables_1.Tables.USERS, input, "id = ?", [userId]);
                return yield Sql.query("UPDATE " + tables_1.Tables.USERS + " SET otp = AES_ENCRYPT('" + input.otp + "', '" + process.env.SECRET_KEY + "')WHERE id = " + userId + "", input);
            }
            catch (err) {
                throw responseBuilder_1.ResponseBuilder.error(err);
            }
        });
    }
    /**
     * Update existing record with encryption
     */
    updateExistingData() {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield Sql.query(`SELECT id, phone, street_address FROM ${tables_1.Tables.USERS_TEST_COPY}`);
            let updated = 0;
            if (result) {
                try {
                    for (var result_1 = __asyncValues(result), result_1_1; result_1_1 = yield result_1.next(), !result_1_1.done;) {
                        let item = result_1_1.value;
                        try {
                            if (item.street_address != null) {
                                item.street_address = item.street_address != null ? `AES_ENCRYPT('${item.street_address}', '${process.env.SECRET_KEY}')` : null;
                            }
                            else {
                                item.street_address = null;
                            }
                            item.phone = (item.phone.length) ? `AES_ENCRYPT('${item.phone}', '${process.env.SECRET_KEY}')` : null;
                            let sql = yield Sql.query(`UPDATE ${tables_1.Tables.USERS_TEST_COPY} SET phone = ${item.phone},street_address = ${item.street_address} WHERE id = ${item.id}`);
                            if (sql.affectedRows > 0) {
                                updated++;
                            }
                        }
                        catch (err) {
                            console.error(err);
                            throw responseBuilder_1.ResponseBuilder.error(err);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (result_1_1 && !result_1_1.done && (_a = result_1.return)) yield _a.call(result_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return updated;
        });
    }
    /**
     * Get all user's email details
     */
    getAllUsersEmail() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield Sql.query("SELECT id, email FROM " + tables_1.Tables.USERS_TEST_COPY);
                return result;
            }
            catch (err) {
                throw responseBuilder_1.ResponseBuilder.error(err);
            }
        });
    }
    /**
     * Get all user's email details
     */
    updateBulkUsersData(data, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const role = yield Sql.updateFirst(tables_1.Tables.USERS_TEST_COPY, data, `id = ?`, [userId]);
                return role.affectedRows > 0 ? true : false;
            }
            catch (err) {
                throw responseBuilder_1.ResponseBuilder.error(err);
            }
        });
    }
    /**
     * insert multiple record
     */
    insertBulkUsersData(data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield My.insertMany(tables_1.Tables.USERS_TEST_COPY, data);
            }
            catch (err) {
                throw responseBuilder_1.ResponseBuilder.error(err);
            }
        });
    }
    getmenu(id) {
        return __awaiter(this, void 0, void 0, function* () {
            // return await My.first(Tables.MENUS, ["*"], "portal_id = ?", [id]);
            return yield Sql.query("SELECT * FROM " + tables_1.Tables.MENUS + " WHERE portal_id =? ", [id]);
        });
    }
}
exports.UserUtils = UserUtils;
//# sourceMappingURL=userUtils.js.map